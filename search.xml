<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CentOS7修改主机名的三种方法</title>
    <url>/2018/05/20/CentOS7%E4%BF%AE%E6%94%B9%E4%B8%BB%E6%9C%BA%E5%90%8D%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="方法1：临时方法"><a href="#方法1：临时方法" class="headerlink" title="方法1：临时方法"></a>方法1：临时方法</h1><p>hostname 主机名 &#x2F;&#x2F;只能临时修改主机名，当重启机器后，主机名称又变回来了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostname xxx</span><br></pre></td></tr></table></figure>

<h1 id="方法2：永久生效"><a href="#方法2：永久生效" class="headerlink" title="方法2：永久生效"></a>方法2：永久生效</h1><p>永久修改主机名称，重启后能保持修改。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname xxx</span><br><span class="line">//删除hostname</span><br><span class="line">hostnamectl set-hostname <span class="string">&quot;&quot;</span></span><br><span class="line">hostnamectl set-hostname <span class="string">&quot;&quot;</span> --static</span><br><span class="line">hostnamectl set-hostname <span class="string">&quot;&quot;</span> --pretty</span><br></pre></td></tr></table></figure>

<h1 id="方法3：永久生效"><a href="#方法3：永久生效" class="headerlink" title="方法3：永久生效"></a>方法3：永久生效</h1><p>修改配置文件&#x2F;etc&#x2F;hostname来实现主机名的修改。把该文件内容hostname name中的name替换成自己想要的主机名重启即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/hostname</span><br><span class="line">hostname xxx</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
        <category>Centos</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Centos</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS安装一些基础的命令</title>
    <url>/2018/10/17/Centos%E5%AE%89%E8%A3%85%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<p> 出现-bash: ***: command not found</p>
<h4 id="安装telnet"><a href="#安装telnet" class="headerlink" title="安装telnet"></a>安装telnet</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum list telnet*</span><br><span class="line">yum install -y telnet-server</span><br><span class="line">yum install -y telnet.*</span><br></pre></td></tr></table></figure>

<h4 id="安装wget"><a href="#安装wget" class="headerlink" title="安装wget"></a>安装wget</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y wget</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker常用命令</title>
    <url>/2017/11/20/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h3><p><strong>查看镜像列表</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p><strong>查看运行中的所有容器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>

<p><strong>从docker hub中拉去指定镜像</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull [images]:[version]</span><br></pre></td></tr></table></figure>

<p><strong>后台启动docker，并指定宿主机端口和docker映射端口</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 8000:80 -tdi --privileged [imageId] [<span class="built_in">command</span>]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>-i：以交互模式运行容器，通常与-t同时使用；<br>-d：后台运行容器，并返回容器ID；<br>-t：为容器重新分配一个伪输入终端，通常与-i同时使用；<br>–privileged：容器将拥有访问主机所有设备的权限；<br>通常情况下[command]填写&#x2F;bin&#x2F;bash即可，特殊情况下，如需要在centos镜像中使用systemctl，则应添加–privileged并设置[command]为init；</p>
</blockquote>
<p><strong>进入终端交互模式</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it [containerId] /bin/bash</span><br></pre></td></tr></table></figure>
<blockquote>
<p>交互模式中，使用ctrl+p+q退出交互，保持运行，使用exit命令退出并停止容器</p>
</blockquote>
<p><strong>非交互模式下，启动&#x2F;停止已部署容器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start/stop [contailnerId]</span><br></pre></td></tr></table></figure>

<p><strong>删除容器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> [containerId]</span><br></pre></td></tr></table></figure>

<p><strong>删除镜像</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi [imageId]</span><br></pre></td></tr></table></figure>

<p><strong>将宿主机内的指定文件传输至容器内部的指定地址</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> [HostFilePath] [contailnerId]:[DockerPath]</span><br></pre></td></tr></table></figure>

<h3 id="镜像制作"><a href="#镜像制作" class="headerlink" title="镜像制作"></a>镜像制作</h3><p><strong>将修改后的容器重新打包生成镜像</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit [containerId] [ImageName]:[Version]</span><br></pre></td></tr></table></figure>

<p><strong>将容器保存为新的镜像，并添加提交人信息和说明信息</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit -a <span class="string">&quot;author&quot;</span> -m <span class="string">&quot;comment&quot;</span> [contaierId] [ImageName]:[Version]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>-a：提交镜像的作者；<br>-c：使用Dockerfile指令来创建镜像；<br>-m：提交时的说明文字；<br>-p：在commit时，将容器暂停；</p>
</blockquote>
<p><strong>提交镜像到云仓库</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker push [ImageId] [ReposityAddress]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Intellij IDEA运行报Command line is too long</title>
    <url>/2016/05/17/Intellij-IDEA%E8%BF%90%E8%A1%8C%E6%8A%A5Command-line-is-too-long/</url>
    <content><![CDATA[<h3 id="Intellij-IDEA运行报Command-line-too-long"><a href="#Intellij-IDEA运行报Command-line-too-long" class="headerlink" title="Intellij IDEA运行报Command line too long"></a>Intellij IDEA运行报Command line too long</h3><p>修改项目.idea&#x2F;workspace.xml</p>
<p>找到标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">&quot;PropertiesComponent&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在标签里加一行</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dynamic.classpath&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
        <category>Idea</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Idea</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Github Pages搭建博客</title>
    <url>/2015/06/16/Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol>
<li>开通githubpage</li>
<li>本地安装git、node.js、hexo</li>
<li>添加域名解析，指向githubpage</li>
</ol>
<h3 id="开通githubpage"><a href="#开通githubpage" class="headerlink" title="开通githubpage"></a>开通githubpage</h3><p>在github上创建一个新的repo，命名为username&lt;github的username&gt;.github.io</p>
<p>进入repo，点击setting，找到Github Pages，将source改为master，并点击save保存</p>
<img src="/2015/06/16/Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/gitpages.jpg" class title="gitpages">

<h3 id="安装git、node、hexo"><a href="#安装git、node、hexo" class="headerlink" title="安装git、node、hexo"></a>安装git、node、hexo</h3><p>git和node没什么好说的，必须先装好</p>
<p>重点说下hexo部分</p>
<p>本地新建一个文件夹，打开该目录的命令行，安装hexo-cli：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>打开可以显示<a href="http://localhost:4000，用浏览器打开可以看到默认的样式，到这里通过hexo生成blog就算是初步完成了。详细的可以去了解下hexo生成出来的项目目录结构，方便资源调整，代码编写。">http://localhost:4000，用浏览器打开可以看到默认的样式，到这里通过hexo生成blog就算是初步完成了。详细的可以去了解下hexo生成出来的项目目录结构，方便资源调整，代码编写。</a></p>
<p>接下来要配置git发布相关</p>
<p>打开根目录下的_config.yml找到其中的deploy项，在其中添加github相关配置，配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repo:</span> <span class="string">github的git工程地址</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>如果想要一键部署到github，需要安装辅助插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --saves</span><br></pre></td></tr></table></figure>

<p>然后使用命令发布</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<h3 id="添加域名解析，指向githubpage"><a href="#添加域名解析，指向githubpage" class="headerlink" title="添加域名解析，指向githubpage"></a>添加域名解析，指向githubpage</h3><p>将域名做CNAME解析，解析到username.github.io这个地址</p>
<p>在hexo工程的source目录下建一个CNAME文件，里面写入解析的域名，即完成博客搭建</p>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS常用命令</title>
    <url>/2023/11/21/CentOS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="一、软链接"><a href="#一、软链接" class="headerlink" title="一、软链接"></a>一、软链接</h1><h2 id="1-创建软链接"><a href="#1-创建软链接" class="headerlink" title="1 创建软链接"></a>1 创建软链接</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s 【目标目录】 【软链接地址】</span><br></pre></td></tr></table></figure>

<p>【目标目录】指软链接指向的目标目录，【软链接地址】指“快捷键”文件名称，该文件是指被指令创建的。</p>
<h2 id="2-删除软连接"><a href="#2-删除软连接" class="headerlink" title="2 删除软连接"></a>2 删除软连接</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf 【软链接地址】</span><br></pre></td></tr></table></figure>

<p>上述指令中，软链接地址最后不能含有“&#x2F;”，当含有“&#x2F;”时，删除的是软链接目标目录下的资源，而不是软链接本身。</p>
<h2 id="3-修改软连接"><a href="#3-修改软连接" class="headerlink" title="3 修改软连接"></a>3 修改软连接</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -snf 【新目标目录】 【软链接地址】</span><br></pre></td></tr></table></figure>

<p>这里修改是指修改软链接的目标目录</p>
<h1 id="二、修改主机名"><a href="#二、修改主机名" class="headerlink" title="二、修改主机名"></a>二、修改主机名</h1><h2 id="1-临时方法"><a href="#1-临时方法" class="headerlink" title="1 临时方法"></a>1 临时方法</h2><p>hostname 主机名 &#x2F;&#x2F;只能临时修改主机名，当重启机器后，主机名称又变回来了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostname xxx</span><br></pre></td></tr></table></figure>

<h2 id="2-永久生效"><a href="#2-永久生效" class="headerlink" title="2 永久生效"></a>2 永久生效</h2><p>永久修改主机名称，重启后能保持修改。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname xxx</span><br><span class="line">//删除hostname</span><br><span class="line">hostnamectl set-hostname <span class="string">&quot;&quot;</span></span><br><span class="line">hostnamectl set-hostname <span class="string">&quot;&quot;</span> --static</span><br><span class="line">hostnamectl set-hostname <span class="string">&quot;&quot;</span> --pretty</span><br></pre></td></tr></table></figure>

<h2 id="3-永久生效"><a href="#3-永久生效" class="headerlink" title="3 永久生效"></a>3 永久生效</h2><p>修改配置文件&#x2F;etc&#x2F;hostname来实现主机名的修改。把该文件内容hostname name中的name替换成自己想要的主机名重启即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/hostname</span><br><span class="line">hostname xxx</span><br></pre></td></tr></table></figure>



<h1 id="三、安装基础服务"><a href="#三、安装基础服务" class="headerlink" title="三、安装基础服务"></a>三、安装基础服务</h1><p> 出现-bash: ***: command not found</p>
<h2 id="1-安装telnet"><a href="#1-安装telnet" class="headerlink" title="1 安装telnet"></a>1 安装telnet</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum list telnet*</span><br><span class="line">yum install -y telnet-server</span><br><span class="line">yum install -y telnet.*</span><br></pre></td></tr></table></figure>

<h2 id="2-安装wget"><a href="#2-安装wget" class="headerlink" title="2 安装wget"></a>2 安装wget</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y wget</span><br></pre></td></tr></table></figure>

<h2 id="3-安装rzsz"><a href="#3-安装rzsz" class="headerlink" title="3 安装rzsz"></a>3 安装rzsz</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y lrzsz</span><br></pre></td></tr></table></figure>



<h1 id="四、CentOS7硬盘分区，删除分区，格式化分区硬盘，支持4T硬盘，fdisk，parted简单用法"><a href="#四、CentOS7硬盘分区，删除分区，格式化分区硬盘，支持4T硬盘，fdisk，parted简单用法" class="headerlink" title="四、CentOS7硬盘分区，删除分区，格式化分区硬盘，支持4T硬盘，fdisk，parted简单用法"></a>四、CentOS7硬盘分区，删除分区，格式化分区硬盘，支持4T硬盘，fdisk，parted简单用法</h1><h2 id="1-查看分区表状态"><a href="#1-查看分区表状态" class="headerlink" title="1 查看分区表状态"></a>1 查看分区表状态</h2><p>先查看是否有磁盘没有分区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure>

<h2 id="2-用fdisk对-dev-sdb进行分区（注意：超过2T硬盘要使用Parted分区）"><a href="#2-用fdisk对-dev-sdb进行分区（注意：超过2T硬盘要使用Parted分区）" class="headerlink" title="2 用fdisk对&#x2F;dev&#x2F;sdb进行分区（注意：超过2T硬盘要使用Parted分区）"></a>2 用fdisk对&#x2F;dev&#x2F;sdb进行分区（注意：超过2T硬盘要使用Parted分区）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdisk /dev/sdb</span><br></pre></td></tr></table></figure>

<p>输入m，或者help可以查看命令操作</p>
<p><img src="/CentOS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%5C01.png" alt="01"></p>
<p>输入p 可查看当前硬盘分区状态</p>
<p><img src="/CentOS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%5C02.png" alt="01"></p>
<p>输入n新建一个分区，输入p 建立分区，输入分区编号 1</p>
<p><img src="/CentOS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%5C03.png" alt="01"></p>
<p>然后会让你设置开始扇区,我填的是开始扇区2048，结束，20480</p>
<p><img src="/CentOS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%5C04.png" alt="01"></p>
<p><strong>最后输入w,回车进行保存，分的区才会生效（切记！）</strong></p>
<p>退出：quit</p>
<h2 id="3-Parted分区"><a href="#3-Parted分区" class="headerlink" title="3 Parted分区"></a>3 Parted分区</h2><h3 id="3-1-将磁盘上原有的分区删除掉"><a href="#3-1-将磁盘上原有的分区删除掉" class="headerlink" title="3.1 将磁盘上原有的分区删除掉"></a>3.1 将磁盘上原有的分区删除掉</h3><p>进入：parted &#x2F;dev&#x2F;sdb</p>
<p>查看：(parted) p</p>
<p>删除：(parted) rm 1</p>
<p>​			(parted) rm 2</p>
<h3 id="3-2-将磁盘格式变成gpt格式（因为parted只能针对gpt格式的磁盘进行操作）"><a href="#3-2-将磁盘格式变成gpt格式（因为parted只能针对gpt格式的磁盘进行操作）" class="headerlink" title="3.2 将磁盘格式变成gpt格式（因为parted只能针对gpt格式的磁盘进行操作）"></a>3.2 将磁盘格式变成gpt格式（因为parted只能针对gpt格式的磁盘进行操作）</h3><p>转换：(parted) mklabel gpt</p>
<p>设置单位：(parted) unit MB(GB, TB)</p>
<p>分区：(parted) mkpart primary 1 -1</p>
<p>查看：(parted) p</p>
<p>退出：(parted) quit（parted分区自动保存，不用手动保存）</p>
<h3 id="3-3-格式化已经分好的区"><a href="#3-3-格式化已经分好的区" class="headerlink" title="3.3 格式化已经分好的区"></a>3.3 格式化已经分好的区</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkfs.xfs -f /dev/sdb1</span><br></pre></td></tr></table></figure>

<h3 id="3-4-挂载"><a href="#3-4-挂载" class="headerlink" title="3.4 挂载"></a>3.4 挂载</h3><p>目标：分区<code>/dev/sdb1</code>挂载至<code>/data</code>目录。</p>
<p>创建目录，<strong>如果目录中存在内容，请先备份，在挂载完成后重新复制回来。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建目录</span></span><br><span class="line"><span class="built_in">mkdir</span> /data</span><br><span class="line"><span class="comment">#挂载目录</span></span><br><span class="line">mount -t xfs /dev/sdb1 /data</span><br><span class="line"><span class="comment">#查看挂载情况</span></span><br><span class="line"><span class="built_in">df</span> -Th</span><br></pre></td></tr></table></figure>

<h3 id="3-5-开机自动挂载"><a href="#3-5-开机自动挂载" class="headerlink" title="3.5 开机自动挂载"></a>3.5 开机自动挂载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/dev/sdb1 /data xfs defaults 0 0&quot;</span> &gt;&gt; /etc/fstab</span><br></pre></td></tr></table></figure>



<h1 id="五、Linux文件系统"><a href="#五、Linux文件系统" class="headerlink" title="五、Linux文件系统"></a>五、Linux文件系统</h1><ul>
<li><code>/var</code>：包含在正常操作中被改变的文件、假脱机文件、记录文件、加锁文件、临时文件和页格式化文件等。</li>
<li><code>/home</code>：包含用户的文件：参数设置文件、个性化文件、文档、数据、EMALL、缓存数据等，每增加一个用户，系统就会根据其用户名在 home 目录下新建和其他用户同名的文件夹，用于保存其用户配置。</li>
<li><code>/proc</code>：包含虚幻的文件，他们实际上并不存在于磁盘上，也不占用任何空间（用 ls-l 可以显示它们的大小）当查看这些文件时，实际上是在访问存在内存中的信息，这些信息用于访问系统。</li>
<li><code>/bin</code>：包含系统启动时需要的执行文件（二进制），这些文件可以被普通用户使用。</li>
<li><code>/etc</code>：为操作系统的配置文件目录（防火墙、启动项）</li>
<li><code>/root</code>：为系统管理员（也叫超级用户或根用户）的 Home 目录。</li>
<li><code>/dev</code>：为设备目录，Linux 下设备被当成文件，这样一来硬件被抽象化、便于读写、网络共享以及需要临时装载到文件系统中，正常情况下，设备会有一个独立的子目录，这些设备的内容会出现在独立的子目录下。</li>
</ul>
<h1 id="六、Linux命令操作"><a href="#六、Linux命令操作" class="headerlink" title="六、Linux命令操作"></a>六、Linux命令操作</h1><ul>
<li><p><strong>查看当前目录命令：<code>pwd</code></strong></p>
</li>
<li><p><strong>打开文件夹命令：<code>cd</code></strong></p>
<ul>
<li>打开指定文件夹：<code>cd [目录名称]</code></li>
<li>打开当前用户的根目录：<code>cd ~</code></li>
<li>返回上级目录：<code>cd …</code></li>
<li>返回进入目录：<code>cd -</code></li>
<li>打开根目录：<code>cd /</code></li>
</ul>
</li>
<li><p><strong>浏览目录下的文件列表命令：<code>ls</code></strong></p>
<ul>
<li>以列的方式查看当前目录下的文件列表：<code>ls -l</code></li>
<li>查看当前目录下所有的文件（包括隐藏文件）：<code>ls -a</code></li>
<li>以列表的方式查看当前目录下的所有文件：<code>ls -la</code></li>
</ul>
</li>
<li><p><strong>创建文件目录命令：<code>mkdir</code></strong></p>
<ul>
<li>新建文件目录：<code>mkdir 文件夹名称</code></li>
<li>递归新建多级目录：<code>mkdir -p 文件夹名称</code></li>
<li>例如在用户目录下新建 test 目录，命令这样写：<code>mkdir -p test/test1/test2/test3</code> 递归新建多级目录的写法</li>
</ul>
</li>
<li><p><strong>删除文件目录命令：<code>rmkdir</code></strong></p>
<ul>
<li><p>删除指定目录：<code>rmkdir 目录名称</code></p>
</li>
<li><p>递归删除指定目录及中间目录：<code>rmdir -p 目录名称</code> 这里没有写错，没有字母 k</p>
</li>
</ul>
</li>
<li><p><strong>删除文件或者目录命令：<code>rm</code></strong></p>
<ul>
<li>常用命令：<code>rm -rf [目录或文件]</code> <code>rm -ri [目录或文件]</code></li>
<li>强制删除文件或目录：<code>rm -rf 目录或者文件</code></li>
<li>在删除前询问是否确认删除：<code>rm -ri 目录或文件</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>因为强制删除的后果不太好，一般不建议使用 <code>rm -rf</code> 进行文件删除</p>
<p>rm 命令中不跟 r 参数，无法删除目录，只能删除文件</p>
</blockquote>
<ul>
<li><p><strong>复制文件或目录命令：<code>cp</code></strong></p>
<ul>
<li>递归复制目录1下的所有的文件和文件夹到目录2：<code>cp -r [目录1][目录2]</code></li>
<li>执行复制操作时覆盖原有目录前询问用户：<code>cp -ri [目录1][目录2]</code></li>
</ul>
</li>
<li><p><strong>移动文件、修改文件名命令：<code>mv</code></strong></p>
<ul>
<li>将文件夹1名称更改为文件夹2：<code>mv 文件1 文件2</code> (给文件更名)</li>
<li>将目录1的文件移动到目录2：<code>mv 目录2 目录2</code> (将目录1的文件移动到目录2)</li>
</ul>
</li>
<li><p><strong>创建文件命令：<code>touch</code></strong></p>
<ul>
<li>touch 文件名称</li>
</ul>
</li>
<li><p><strong>查看、编辑文件命令：<code>vi</code></strong></p>
<ul>
<li>vi 命令为 UNIX 操作系统或者类 UNIX 操作系统都有具有的功能强大的文件编辑命令，用户输入 vi ++ 文件名，便可以进入 vi 模式进行文件内容的查看和编辑，如果文件已经存在，则直接打开文件，如果文件不存在，则系统将打开一个全新的空文件。</li>
</ul>
</li>
</ul>
<p>vi的三种模式：</p>
<ol>
<li>命令模式</li>
</ol>
<p>当用户使用 vi 命令打开文件后，则进入命令模式，用户可以输入命令来执行各种功能。</p>
<table>
<thead>
<tr>
<th>取值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>L</td>
<td>光标移至屏幕最后一行</td>
</tr>
<tr>
<td>space</td>
<td>光标右移一个字符</td>
</tr>
<tr>
<td>backspace</td>
<td>光标左移一个字符</td>
</tr>
<tr>
<td>N+</td>
<td>光标向上移动N行</td>
</tr>
<tr>
<td>n+</td>
<td>光标向下移n行</td>
</tr>
</tbody></table>
<ol start="2">
<li>输入模式</li>
</ol>
<p>如果用户要对文件做修改，则可以使用下面几种命令，进入输入模式，用户进入输入模式之后，可以任意修改文件，除了 Esc 键外，用户输入的任何字符都会被作为内容写入文件中，用户输入 Esc 可以对文件进行相关操作。</p>
<table>
<thead>
<tr>
<th>取值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>a、i、r、o、A、I、R、O</td>
<td>编辑模式</td>
</tr>
<tr>
<td>dd</td>
<td>删除当前光标</td>
</tr>
<tr>
<td>ndd</td>
<td>删除n行</td>
</tr>
</tbody></table>
<ol start="3">
<li>末行模式</li>
</ol>
<p>如果用户完成编辑命令，则可以按照 esc + “:” 进入末行模式，用户可以对文件内容继续进行搜索，也可以输入 “:wq!” 进行文件保存并退出，或者输入 “:q!” 强制退出文件编辑。</p>
<table>
<thead>
<tr>
<th>取值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>:wq!</td>
<td>保存并退出</td>
</tr>
<tr>
<td>:q!</td>
<td>强制退出</td>
</tr>
<tr>
<td>:s&#x2F;字符串 1&#x2F;字符串 2</td>
<td>将文件中出现的字符串1替换为字符串2</td>
</tr>
<tr>
<td>:set nu</td>
<td>显示所有行号</td>
</tr>
</tbody></table>
<ul>
<li><p><strong>查看、编辑文件命令：<code>cat</code></strong></p>
<ul>
<li>显示一个小的文件的内容：<code>cat 文件名称</code></li>
<li>创建并打开一个新的文件：<code>cat &gt; 文件名称</code></li>
</ul>
</li>
<li><p><strong>查看文件开头内容命令：<code>head</code></strong></p>
<ul>
<li><code>head [参数] [文件名]</code></li>
</ul>
</li>
</ul>
<p>例如，使用 head 命令显示某个文件开始的 n 行数据：<code>head -n 文件名称</code></p>
<table>
<thead>
<tr>
<th>取值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-n</td>
<td>&lt;行数&gt;显示的行数</td>
</tr>
<tr>
<td>默认</td>
<td>默认显示文件前10行数据</td>
</tr>
</tbody></table>
<ul>
<li><p><strong>查看文件结尾内容命令：<code>tail</code></strong></p>
<ul>
<li>动态加载某个文件的内容（常用于查看日志文件）：<code>tail -f 文件名称</code></li>
<li>展示文件最后几行的数据：<code>tail -n 行数文件名称</code></li>
</ul>
</li>
</ul>
<h1 id="七、Linux用户操作命令"><a href="#七、Linux用户操作命令" class="headerlink" title="七、Linux用户操作命令"></a>七、Linux用户操作命令</h1><ul>
<li><p><strong>切换用户命令：<code>su</code></strong></p>
</li>
<li><ul>
<li><code>su [用户名]</code> 或者 <code>su -[用户名]</code></li>
<li><code>su[用户名]</code>和 <code>su -[用户名]</code>都可以切换用户，前者类似于临时切换用户，当使用该命令进行切换新用户时，用户配置仍然沿用原来的用户配置，如环境变量、系统变量等。而后者进行切换用户时，环境变量、系统设置全部切换成新用户的用户配置。</li>
</ul>
</li>
<li><p><strong>查看当前登陆用户命令：<code>whoami</code></strong></p>
</li>
<li><p><strong>查看当前用户所属分组命令：<code>groups</code></strong></p>
</li>
<li><p><strong>查看当前用户 UID 和 GID 命令：<code>id</code></strong></p>
</li>
<li><p><strong>添加新用户命令：<code>useradd</code></strong></p>
</li>
</ul>
<table>
<thead>
<tr>
<th>取值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-c</td>
<td>代表comment指定一段注释性描述</td>
</tr>
<tr>
<td>-d</td>
<td>指定用户主目录</td>
</tr>
<tr>
<td>-g</td>
<td>指定用户所属的用户组</td>
</tr>
<tr>
<td>-G</td>
<td>指定用户所属的附加组</td>
</tr>
<tr>
<td>-u</td>
<td>指定用户的用户号</td>
</tr>
<tr>
<td>缺省</td>
<td>直接添加用户</td>
</tr>
</tbody></table>
<p>在 Linux 操作系统中添加用户：<code>useradd 用户名</code></p>
<p>在 Linux 操作系统中添加用户并指定用户 UID：<code>useradd -u</code> 指定的 UID 用户名</p>
<ul>
<li>**修改用户密码命令：<code>passwd</code>**例如：修改当前用户名为 sang 的用户密码：<code>passwd sang</code></li>
</ul>
<p>在添加用户之后，只有为其设置密码，用户才能登陆</p>
<table>
<thead>
<tr>
<th>取值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-d</td>
<td>删除密码，仅有系统管理员才能使用</td>
</tr>
<tr>
<td>-f</td>
<td>强制执行</td>
</tr>
<tr>
<td>-k</td>
<td>设置只有密码过期后才能更新</td>
</tr>
<tr>
<td>-l</td>
<td>锁着密码</td>
</tr>
<tr>
<td>-s</td>
<td>列出相关信息，仅有系统管理员才能使用</td>
</tr>
<tr>
<td>-u</td>
<td>解开已上锁的账号</td>
</tr>
</tbody></table>
<ul>
<li><p><strong>删除用户命令：<code>userdel</code></strong></p>
</li>
<li><ul>
<li>删除用户：<code>userdel 用户名</code></li>
<li>删除用户并同时删除其登陆信息：<code>userdel -r 用户名</code></li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>取值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-r</td>
<td>删除用户以及其登录日志等信息</td>
</tr>
<tr>
<td>-f</td>
<td>强制删除用户，即使用户已经登录</td>
</tr>
<tr>
<td>缺省</td>
<td>直接删除用户</td>
</tr>
</tbody></table>
<ul>
<li><p><strong>修改用户信息命令：<code>usermod</code></strong></p>
</li>
<li><ul>
<li>语法：<code>usermod [选项] [参数] [用户名]</code></li>
<li>修改用户登录名：<code>usermod -l 新用户名 旧用户名</code></li>
<li>修改用户所属分组：<code>usermod -g 新组名称 用户名</code></li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>取值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-c</td>
<td>修改用户账号的备注文字</td>
</tr>
<tr>
<td>-d</td>
<td>修改用户登录时的目录</td>
</tr>
<tr>
<td>-e</td>
<td>修改账号的有效期</td>
</tr>
<tr>
<td>-f</td>
<td>修改密码过期后多少天关闭账号</td>
</tr>
<tr>
<td>-g</td>
<td>修改用户所属的群组</td>
</tr>
<tr>
<td>-G</td>
<td>修改用户所属附加组</td>
</tr>
<tr>
<td>-l</td>
<td>修改用户账号名称</td>
</tr>
<tr>
<td>-L</td>
<td>锁定用户密码，使密码无效</td>
</tr>
<tr>
<td>-u</td>
<td>修改用户id</td>
</tr>
<tr>
<td>-U</td>
<td>解除密码锁定</td>
</tr>
</tbody></table>
<ul>
<li><p><strong>添加用户组命令：<code>groupadd</code></strong></p>
</li>
<li><ul>
<li>语法：<code>groupadd [选项] [组名称]</code></li>
<li>修改用户登陆名：<code>groupadd 组名</code></li>
<li>修改用户所属分组：<code>groupadd -g 组 GID 组名</code></li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>取值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-g</td>
<td>指定工作组的id</td>
</tr>
<tr>
<td>-r</td>
<td>创建系统工作组</td>
</tr>
<tr>
<td>-o</td>
<td>允许添加组ID不唯一的工作组</td>
</tr>
<tr>
<td>缺省</td>
<td>添加用户分组</td>
</tr>
</tbody></table>
<h1 id="八、Linux权限操作"><a href="#八、Linux权限操作" class="headerlink" title="八、Linux权限操作"></a>八、Linux权限操作</h1><p>Linux 操作系统为文件定义了读、写、执行三种权限，不同的用户或者用户组可以具有不同的权限，系统采用 “r”、“w”、“x” 来分别表示文件的读、写、执行权限。使用 ls -l 命令可以查看到用户在当前目录或者文件的操作权限。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">drwxr -xr -x. 2 root root 4096 Sep 23 2011 bin</span><br></pre></td></tr></table></figure>

<p>从左至右分别表示如下含义：</p>
<ul>
<li><code>d</code>：代表 bin 数目目录而不是文件</li>
<li><code>rwx</code>：代表拥有者具有读、写、执行的权限</li>
<li><code>r -x</code>：代表同组用户具有读、执行的权限，但是没有写权限</li>
<li><code>r -x</code>：代表其他组用户具有读、执行权限，没有写权限</li>
</ul>
<p>常用的变更权限命令为：<code>chmod</code></p>
<p>语法：<code>chmod [选项] [参数]</code></p>
<table>
<thead>
<tr>
<th>取值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-c</td>
<td>显示指令执行过程，但只返回更改的部分</td>
</tr>
<tr>
<td>-f</td>
<td>不显示错误信息</td>
</tr>
<tr>
<td>-r</td>
<td>递归授权</td>
</tr>
<tr>
<td>-v</td>
<td>显示指令执行过程</td>
</tr>
</tbody></table>
<p>chmod 的参数可以分为两种，分别是权限模式和数字模式。</p>
<ol>
<li>权限模式</li>
</ol>
<p>权限模式使用 u、g、o 分别代表拥有者、同组用户、其他组用户，使用 + 和一代表赋予和收回权限，使用 r、w、x 代表读、写、执行权限。</p>
<p>例如：将文件01的执行权限给当前用户，写权限赋给用户所在的用户组和其他用户。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> -r U+X,G+W F01</span><br></pre></td></tr></table></figure>

<p>例如：将文件 f01 的读、写、执行的权限赋给当前用户，将读、写权限赋给用户所在的用户组和其他用户。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> -r u=rwx,g=rw,o=rw f01</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>数字模式</li>
</ol>
<p>为了简化授权步骤，用户也可以采用数字模式进行授权，使用二进制的形式代表 r、w、x 三种权限，如 <code>101 (5) =r -x</code>，<code>111 (7) =rwx</code>，<code>100 (3) =r- -</code></p>
<p>例如：将文件 f01 的读、写、执行的权限赋给当前用户，将读和执行权限赋给用户组、将写和执行权限赋给其他用户。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 753 -r f01</span><br></pre></td></tr></table></figure>

<p>例如：将文件 f01 的读、写、执行权限赋给所有用户。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 -r f01</span><br></pre></td></tr></table></figure>



<h1 id="九、Linux进程管理"><a href="#九、Linux进程管理" class="headerlink" title="九、Linux进程管理"></a>九、Linux进程管理</h1><p>在 Linux 的应用中，我们需要对进程进行管理，如查看某个进程是否启动、以及在必要的时刻，杀掉某个线程。</p>
<ul>
<li><strong>查看进程命令：ps</strong></li>
</ul>
<p>ps 命令是 Linux 操作系统中查看进程的命令，通过 ps 命令我们可以查看 Linux 操作系统中正在运行的过程，并可以获得进程的 PID（进程的唯一标识），通过 PID 可以对进程进行相应的管理。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep [进程关键字]</span><br></pre></td></tr></table></figure>

<p>根据进程关键词查看进程命令显示如下，显示的进程列表中第一列表示开启进程的用户，第二列表示进程唯一标识 PID，第三列表示父进程 PPID，第四列表示 CPU 占用资源比列，最后一列表示进程所执行程序的具体位置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]$ ps -ef|grep sshd</span><br><span class="line">root 1829 1  0 May24 ?   00:00:00 /usr/sbin/sshd</span><br><span class="line">shang 24166 24100  0   20:17 pts/2  00:00:00      grep  sshd</span><br><span class="line">[root@localhost ~]$</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>杀掉进程命令：kill</strong></li>
</ul>
<p>当系统中有进程进入死循环，或者需要被关闭时，我们可以使用 kill 命令对其关闭。</p>
<p><code>kill -9 [PID]</code> PID 为 Linux 操作系统中进程的标识</p>
<h1 id="十、Linux其他常用命令大全"><a href="#十、Linux其他常用命令大全" class="headerlink" title="十、Linux其他常用命令大全"></a>十、Linux其他常用命令大全</h1><ul>
<li>清屏命令：clear</li>
<li>查询命令详细参数命令：man</li>
<li>挂载命令：mnt</li>
<li>远程连接服务 SSH 相关命令：</li>
<li>启动 SSH 服务命令：<code>service sshd start</code></li>
<li>重启 SSH 服务命令：<code>service sshd restart</code></li>
<li>关闭 SSH 服务命令：<code>service sshd stop</code></li>
</ul>
<p>Linux 大多数情况下都是远程服务器，开发者通过远程工具连接 Linux ，启动了某个项目的 JAR，一旦窗口关闭，JAR 也就停止运行了，因此一般通过如下命令启动 JAR：<code>nohup java -jar jar-0.0.1-SNAPSHOT.jar &amp;</code></p>
<p>这里多了 nohup ，表示当前窗口关闭时服务不挂起，继续在后台运行</p>
<h1 id="十一、Linux系统软件安装"><a href="#十一、Linux系统软件安装" class="headerlink" title="十一、Linux系统软件安装"></a>十一、Linux系统软件安装</h1><p><strong>常用软件安装</strong></p>
<p>Linux 下常用的软件安装方式有3种。</p>
<ul>
<li><strong>tar 安装</strong>：如果开发商提供的是 tar、tar.gz、tar.bz 格式的包（其中 tar 格式的为打包后没有压缩的包，gz 结尾的是按照 gzip 打包并压缩的软件包，tar.bz 是按照二进制方式打包并压缩的软件包），可以采用 tar 包安装，tar 安装方式本质上是解压软件开发商提供的软件包，之后在通过相应配置，完成软件的安装。</li>
<li><strong>rpm 安装</strong>：rpm 安装方式是 redhat Linux 系列推出的一个软件包管理器，类似于 Windows 下的 exe 安装程序，可以直接使用 rpm 命令安装。</li>
<li><strong>yum 安装</strong>：yum 安装本质上依然是 rpm 包安装，和 rpm 安装方式的不同之处是用户可以通过 yum 参数，指定安装的软件包，系统将自动从互联网上下载相应的 rpm 软件包。而无须用户关心软件包的下载地址，以及软件包的依赖关系。</li>
</ul>
<p>软件安装常用命令</p>
<ul>
<li>解压压缩命令：<code>tar</code></li>
<li>语法：<code>tar [选项] [压缩包]</code></li>
<li>解压 gzip 包：<code>tar -zxvf [包名]</code></li>
<li>解压 bz 包：<code>tar -jxvf [包名]</code></li>
<li>解压普通包：<code>tar -xvf [包名]</code></li>
</ul>
<table>
<thead>
<tr>
<th>取值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-c</td>
<td>指定特定目录压缩</td>
</tr>
<tr>
<td>-x</td>
<td>从备份文件中还原文件</td>
</tr>
<tr>
<td>-t</td>
<td>列出备份文件的内容</td>
</tr>
<tr>
<td>-r</td>
<td>添加文件到已经压缩的文件</td>
</tr>
<tr>
<td>-z</td>
<td>有gzip属性的（后缀是gz的）</td>
</tr>
<tr>
<td>-j</td>
<td>有bz2属性的（后缀是bz的）</td>
</tr>
<tr>
<td>-Z</td>
<td>有cpmpress属性的</td>
</tr>
<tr>
<td>-v</td>
<td>显示所有进程</td>
</tr>
<tr>
<td>-O</td>
<td>将文件解压到标准输出</td>
</tr>
<tr>
<td>-f</td>
<td>使用档案名称</td>
</tr>
</tbody></table>
<p><strong>安装卸载命令：rpm</strong></p>
<ul>
<li>语法：<code>rpm [选项] [软件包]</code></li>
<li>查询是否已经安装了某软件包：<code>rpm -qa|grep [软件包关键词]</code></li>
<li>卸载已经安装的软件包：<code>rpm -e 软件包全名</code></li>
<li>安装软件包并查看进度：<code>rpm -ivh 软件包路径</code></li>
</ul>
<table>
<thead>
<tr>
<th>取值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-ivh</td>
<td>安装显示安装进度</td>
</tr>
<tr>
<td>-Uvh</td>
<td>升级软件包</td>
</tr>
<tr>
<td>-qpl</td>
<td>列出rpm软件包内的文件信息</td>
</tr>
<tr>
<td>-qpi</td>
<td>列出rpm软件包的描述信息</td>
</tr>
<tr>
<td>-qf</td>
<td>查找指定文件属于哪个rpm软件包</td>
</tr>
<tr>
<td>-Va</td>
<td>校验所有的rpm软件包，查找丢失的文件</td>
</tr>
<tr>
<td>-e</td>
<td>删除包</td>
</tr>
<tr>
<td>-qa</td>
<td>查找已经安装的rpm包</td>
</tr>
</tbody></table>
<h1 id="十二、Linux操作系统优化"><a href="#十二、Linux操作系统优化" class="headerlink" title="十二、Linux操作系统优化"></a>十二、Linux操作系统优化</h1><h2 id="1-防火墙-firewalld"><a href="#1-防火墙-firewalld" class="headerlink" title="1 防火墙-firewalld"></a>1 防火墙-firewalld</h2><ul>
<li>启动防火墙</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start firewalld</span><br></pre></td></tr></table></figure>

<ul>
<li>重启防火墙</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart firewalld</span><br></pre></td></tr></table></figure>

<ul>
<li>关闭防火墙</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure>

<ul>
<li>查看防火墙的状态</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure>

<ul>
<li>设置开机启动</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> firewalld</span><br></pre></td></tr></table></figure>

<ul>
<li>设置开机不启动</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure>

<ul>
<li>查看防火墙服务是否设置开机启动</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl is-enabled firewalld</span><br></pre></td></tr></table></figure>



<h2 id="2-关闭-Selinux"><a href="#2-关闭-Selinux" class="headerlink" title="2 关闭-Selinux"></a>2 关闭-Selinux</h2><ul>
<li>查看Selinux</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]$ sestatus</span><br><span class="line">或者</span><br><span class="line">[root@localhost ~]$ getenforce</span><br></pre></td></tr></table></figure>

<ul>
<li>临时关闭</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]$ setenforce 0</span><br></pre></td></tr></table></figure>

<ul>
<li>永久关闭</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#编辑配置文件</span></span><br><span class="line">vim /etc/sysconfig/selinux</span><br><span class="line"><span class="comment">#修改为以下配置：</span></span><br><span class="line">SELINUX=disabled</span><br><span class="line"><span class="comment">#重复服务器生效</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>



<h2 id="3-关闭透明大页-THP"><a href="#3-关闭透明大页-THP" class="headerlink" title="3 关闭透明大页-THP"></a>3 关闭透明大页-THP</h2><ul>
<li>查看透明大页情况</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class="line"><span class="built_in">cat</span> /sys/kernel/mm/transparent_hugepage/enabled</span><br></pre></td></tr></table></figure>

<ul>
<li>关闭透明大页</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]$ vim /etc/rc.d/rc.local</span><br><span class="line"><span class="comment">#添加如下配置</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -f /sys/kernel/mm/transparent_hugepage/enabled; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -f /sys/kernel/mm/transparent_hugepage/defrag; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#保存文件</span></span><br><span class="line">:wq</span><br></pre></td></tr></table></figure>

<ul>
<li>保存退出，然后赋予rc.local文件的执行权限</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]$ <span class="built_in">chmod</span> +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>

<ul>
<li>重启服务器生效</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]$ reboot</span><br></pre></td></tr></table></figure>



<h2 id="4-修改文件句柄数-open-files"><a href="#4-修改文件句柄数-open-files" class="headerlink" title="4 修改文件句柄数-open files"></a>4 修改文件句柄数-open files</h2><ul>
<li>查看</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -a</span><br><span class="line">open files (-n) 1024</span><br></pre></td></tr></table></figure>

<ul>
<li>临时修改</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -n 4096</span><br><span class="line">open files (-n) 4096</span><br></pre></td></tr></table></figure>

<ul>
<li>永久修改</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/security/limits.conf</span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 65536</span><br><span class="line">* 代表所有用户，如果指定具体的用户，把*换成具体的工具名称</span><br><span class="line">zhangsan soft nofile 65536</span><br><span class="line">zhangsan hard nofile 65536</span><br></pre></td></tr></table></figure>

<ul>
<li>重新连接生效</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br><span class="line">reconnect</span><br></pre></td></tr></table></figure>

<ul>
<li>查看</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -a</span><br><span class="line">open files (-n) 65536</span><br></pre></td></tr></table></figure>



<h2 id="5-修改进程数-max-user-processes"><a href="#5-修改进程数-max-user-processes" class="headerlink" title="5 修改进程数-max user processes"></a>5 修改进程数-max user processes</h2><ul>
<li>查看</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -a</span><br><span class="line">max user processes (-u) 15656</span><br></pre></td></tr></table></figure>

<ul>
<li>临时修改</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -u 20000</span><br><span class="line">max user processes (-u) 20000</span><br></pre></td></tr></table></figure>

<ul>
<li>永久修改</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/security/limits.conf</span><br><span class="line">* soft <span class="built_in">nproc</span> 65536</span><br><span class="line">* hard <span class="built_in">nproc</span> 65536</span><br><span class="line">* 代表所有用户，如果指定具体的用户，把*换成具体的工具名称</span><br><span class="line">zhangsan soft <span class="built_in">nproc</span> 65536</span><br><span class="line">zhangsan hard <span class="built_in">nproc</span> 65536</span><br></pre></td></tr></table></figure>

<ul>
<li>重新连接生效</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br><span class="line">reconnect</span><br></pre></td></tr></table></figure>

<ul>
<li>查看</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -a</span><br><span class="line">max user processes (-u) 65536</span><br></pre></td></tr></table></figure>



<h2 id="6-修改-vm-max-map-count"><a href="#6-修改-vm-max-map-count" class="headerlink" title="6 修改-vm.max_map_count"></a>6 修改-vm.max_map_count</h2><p>max_map_count文件包含限制一个进程可以拥有的VMA(虚拟内存区域)的数量</p>
<ul>
<li>查看当前值</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysctl -a | grep vm.max_map_count</span><br><span class="line">vm.max_map_count = 65530</span><br></pre></td></tr></table></figure>

<ul>
<li>临时修改</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysctl -w vm.max_map_count=200000</span><br><span class="line">vm.max_map_count = 200000</span><br></pre></td></tr></table></figure>

<ul>
<li>永久修改</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br><span class="line">vm.max_map_count=262144</span><br></pre></td></tr></table></figure>

<ul>
<li>生效</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysctl -p</span><br><span class="line">vm.max_map_count = 262144</span><br></pre></td></tr></table></figure>



<h2 id="7-修改-fs-file-max"><a href="#7-修改-fs-file-max" class="headerlink" title="7 修改-fs.file-max"></a>7 修改-fs.file-max</h2><p>设置系统所有进程一共可以打开的文件数量 。同时一些程序可以通过setrlimit调用，设置每个进程的限制。如果得到大量使用完文件句柄的错误信息，是应该增加这个值。</p>
<ul>
<li>查看系统当前值</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysctl -a | grep fs.file-max</span><br><span class="line">fs.file-max = 396183</span><br></pre></td></tr></table></figure>

<ul>
<li>临时修改</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysctl -w fs.file-max=6553560</span><br></pre></td></tr></table></figure>

<ul>
<li>永久修改</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br><span class="line">fs.file-max=6553560</span><br></pre></td></tr></table></figure>

<ul>
<li>生效</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysctl -p</span><br><span class="line">fs.file-max = 6553560</span><br></pre></td></tr></table></figure>



<h1 id="十三、【Linux】centos创建用户以及赋予sudo权限"><a href="#十三、【Linux】centos创建用户以及赋予sudo权限" class="headerlink" title="十三、【Linux】centos创建用户以及赋予sudo权限"></a>十三、【Linux】centos创建用户以及赋予sudo权限</h1><h2 id="1-创建用户"><a href="#1-创建用户" class="headerlink" title="1 创建用户"></a>1 创建用户</h2><p>用户名为：test</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adduser <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p>为该用户创建密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p>输入密码</p>
<h2 id="2-授权"><a href="#2-授权" class="headerlink" title="2 授权"></a>2 授权</h2><p>个人用户的权限只可以在本home下有完整权限，其他目录要看别人授权。而经常需要root用户的权限，这时候sudo可以化身为root来操作。<br>新创建的用户并不能使用sudo命令，需要给他添加授权。<br>sudo命令的授权管理是在sudoers文件里的。可以看看sudoers：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]$ sudoers</span><br></pre></td></tr></table></figure>

<p>找到这个文件(&#x2F;etc&#x2F;sudoers)位置之后，查看权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l /etc/sudoers</span><br></pre></td></tr></table></figure>

<p>只有读权限，将此文件增加写权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 640 /etc/sudoers</span><br><span class="line"><span class="built_in">ls</span> -l /etc/sudoers</span><br></pre></td></tr></table></figure>

<p>修改&#x2F;etc&#x2F;sudoers文件：添加一个新用户</p>
<p>找到 root	ALL&#x3D;(ALL)		ALL在后面添加一行</p>
<p>test	ALL&#x3D;(ALL)		ALL</p>
<p>注：可以在sudoers添加下面四行中的任意一条</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">youuser    ALL=(ALL)      ALL</span><br><span class="line">%youuser   ALL=(ALL)      ALL</span><br><span class="line">youuser    ALL=(ALL)      NOPASSWD: ALL</span><br><span class="line">%youuser   ALL=(ALL)      NOPASSWD: ALL</span><br><span class="line"></span><br><span class="line">第一行: 允许用户youuser执行sudo命令(需要输入密码).</span><br><span class="line">第二行: 允许用户组youuser里面的用户执行sudo命令(需要输入密码).</span><br><span class="line">第三行: 允许用户youuser执行sudo命令,并且在执行的时候不输入密码.</span><br><span class="line">第四行: 允许用户组youuser里面的用户执行sudo命令,并且在执行的时候不输入密码.</span><br></pre></td></tr></table></figure>

<p>保存，退出后，将文件权限改回去：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 440 /etc/sudoers</span><br></pre></td></tr></table></figure>

<p>这样就可以使用新用户登录，并使用sudo权限了</p>
<h2 id="3-删除用户命令"><a href="#3-删除用户命令" class="headerlink" title="3 删除用户命令"></a>3 删除用户命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">userdel -r <span class="built_in">test</span></span><br><span class="line"><span class="comment">#测试删除是否成功</span></span><br><span class="line">su <span class="built_in">test</span></span><br></pre></td></tr></table></figure>



<h1 id="十四、CentOS7集群配置免密登录"><a href="#十四、CentOS7集群配置免密登录" class="headerlink" title="十四、CentOS7集群配置免密登录"></a>十四、CentOS7集群配置免密登录</h1><h2 id="1-分别修改三台机器的hosts，配置主机影射关系"><a href="#1-分别修改三台机器的hosts，配置主机影射关系" class="headerlink" title="1 分别修改三台机器的hosts，配置主机影射关系"></a>1 分别修改三台机器的hosts，配置主机影射关系</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure>

<p>文件中输入以下内容：ip hostname</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">192.168.10.131 node1 node1</span><br><span class="line">192.168.10.132 node2 node2</span><br><span class="line">192.168.10.133 node3 node3</span><br></pre></td></tr></table></figure>

<h2 id="2-配置三台虚拟机免密登录"><a href="#2-配置三台虚拟机免密登录" class="headerlink" title="2 配置三台虚拟机免密登录"></a>2 配置三台虚拟机免密登录</h2><h3 id="2-1-切换到用户根目录"><a href="#2-1-切换到用户根目录" class="headerlink" title="2.1 切换到用户根目录"></a>2.1 切换到用户根目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure>

<h3 id="2-2-生成公钥和私钥，分别在三台机器执行命令，执行命令后直接三次回车"><a href="#2-2-生成公钥和私钥，分别在三台机器执行命令，执行命令后直接三次回车" class="headerlink" title="2.2 生成公钥和私钥，分别在三台机器执行命令，执行命令后直接三次回车"></a>2.2 生成公钥和私钥，分别在三台机器执行命令，执行命令后直接三次回车</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<h3 id="2-3-在用户根目录下-ssh目录中生成了两个文件，id-rsa-私钥-、id-rsa-pub-公钥"><a href="#2-3-在用户根目录下-ssh目录中生成了两个文件，id-rsa-私钥-、id-rsa-pub-公钥" class="headerlink" title="2.3 在用户根目录下.ssh目录中生成了两个文件，id_rsa(私钥)、id_rsa.pub(公钥)"></a>2.3 在用户根目录下.ssh目录中生成了两个文件，id_rsa(私钥)、id_rsa.pub(公钥)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure>

<h3 id="2-4-将公钥复制到同一台机器，分别在三台机器执行以下命令"><a href="#2-4-将公钥复制到同一台机器，分别在三台机器执行以下命令" class="headerlink" title="2.4 将公钥复制到同一台机器，分别在三台机器执行以下命令"></a>2.4 将公钥复制到同一台机器，分别在三台机器执行以下命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-copy-id node1</span><br><span class="line">ssh-copy-id node2</span><br><span class="line">ssh-copy-id node3</span><br><span class="line"><span class="comment">#分别输入密码</span></span><br></pre></td></tr></table></figure>

<h3 id="2-5验证免密是否成功"><a href="#2-5验证免密是否成功" class="headerlink" title="2.5验证免密是否成功"></a>2.5验证免密是否成功</h3><h1 id="十五、远程执行Linux命令"><a href="#十五、远程执行Linux命令" class="headerlink" title="十五、远程执行Linux命令"></a>十五、远程执行Linux命令</h1><h2 id="1-执行简单的命令"><a href="#1-执行简单的命令" class="headerlink" title="1 执行简单的命令"></a>1 执行简单的命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh root@host <span class="string">&quot;df -Th&quot;</span></span><br></pre></td></tr></table></figure>

<p>一次执行多条命令，使用分号把不同的命令隔起来就OK了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh root@host <span class="string">&quot;df -Th;pwd&quot;</span></span><br></pre></td></tr></table></figure>

<p>添加-t参数后，ssh会保持登录状态，直到退出需要交互的命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -t root@host <span class="string">&quot;df -Th&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-保存远程执行命令结果"><a href="#2-保存远程执行命令结果" class="headerlink" title="2 保存远程执行命令结果"></a>2 保存远程执行命令结果</h2><p>赋值的方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">result=`ssh root@host <span class="string">&quot;df -Th&quot;</span>`</span><br></pre></td></tr></table></figure>

<p>追加到文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh root@host <span class="string">&quot;df -Th&quot;</span> &gt;&gt; ./log</span><br></pre></td></tr></table></figure>

<h2 id="3-执行本地脚本"><a href="#3-执行本地脚本" class="headerlink" title="3 执行本地脚本"></a>3 执行本地脚本</h2><p>本地创建一个脚本文件 <code>test.sh</code></p>
<p>然后执行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh root@host &lt; test.sh</span><br></pre></td></tr></table></figure>

<p>通过重定向stdin，本地脚本test.sh在远程服务器上被执行。</p>
<p>为脚本<code>test.sh</code> 传递一个参数，执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh root@host &lt; test.sh helloworld</span><br><span class="line">ssh root@host &lt; <span class="string">&quot;test.sh helloworld&quot;</span></span><br></pre></td></tr></table></figure>

<p>显示了执行的结果：方法都无法为脚本传递参数。</p>
<p>想要在这种情况下（远程执行本地脚本）执行带有参数的脚本，需为bash指定-s参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh root@host <span class="string">&#x27;bash -s&#x27;</span> &lt; test.sh helloword</span><br></pre></td></tr></table></figure>

<h2 id="4-执行远程服务器上的脚本"><a href="#4-执行远程服务器上的脚本" class="headerlink" title="4 执行远程服务器上的脚本"></a>4 执行远程服务器上的脚本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#执行命令</span></span><br><span class="line">ssh root@host <span class="string">&quot;/home/test.sh&quot;</span></span><br><span class="line"><span class="comment">#执行带参数命令</span></span><br><span class="line">ssh root@host /home/test.sh helloworld</span><br></pre></td></tr></table></figure>



<h1 id="十六、解压缩"><a href="#十六、解压缩" class="headerlink" title="十六、解压缩"></a>十六、解压缩</h1><h2 id="1-tar"><a href="#1-tar" class="headerlink" title="1 tar"></a>1 tar</h2><p>-c 建立一个压缩文件的参数指令（相当于create ）</p>
<p>-x 解压缩一个文件的参数指令</p>
<p>-z 是否同时具有gzip属性，所以也要用gzip属性来解压</p>
<p>-f 使用档名，注意在f 后面要立即接档名</p>
<p>-v 压缩过程显示文档</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#把根目录下的etc文件压缩在当前文件夹，并命名为ect.tar</span></span><br><span class="line">tar -cvf ./ect.tar /etc</span><br><span class="line"><span class="comment">#把根目录下的etc文件压缩在当前文件夹，并命名为ect.tar.gz</span></span><br><span class="line">tar -zcvf ./ect.tar.gz /etc</span><br><span class="line"><span class="comment">#解压ect.tar到当前目录</span></span><br><span class="line">tar -xvf ect.tar</span><br><span class="line"><span class="comment">#解压ect.tar.gz到当前目录</span></span><br><span class="line">tar -zxvf ect.tar.gz</span><br><span class="line"><span class="comment">#解压ect.tar到指定目录</span></span><br><span class="line">tar -xvf ect.tar -C 路径</span><br></pre></td></tr></table></figure>

<h2 id="2-zip"><a href="#2-zip" class="headerlink" title="2 zip"></a>2 zip</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#把根目录下的etc文件压缩在当前文件夹，并命名为ect.zip</span></span><br><span class="line">zip -r etc.zip /etc</span><br><span class="line"><span class="comment">#解压ect.zip到当前目录</span></span><br><span class="line">unzip etc.zip</span><br><span class="line"><span class="comment">#解压ect.zip到指定目录,不提示的情况下</span></span><br><span class="line">unzip -o -d 指定目录 etc.zip</span><br></pre></td></tr></table></figure>



<h1 id="十七、端口占用查询"><a href="#十七、端口占用查询" class="headerlink" title="十七、端口占用查询"></a>十七、端口占用查询</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsof -i:端口号</span><br><span class="line">netstat -lntpu|grep 端口号</span><br><span class="line">netstat -tunlp用于显示tcp，udp的端口和进程等相关情况</span><br><span class="line">命令里的t,u,n,l,p均有不同含义：</span><br><span class="line">-t 仅显示和tcp相关的</span><br><span class="line">-u 仅显示和udp相关的</span><br><span class="line">-n 不限时别名，能显示数字的全部转换为数字</span><br><span class="line">-l 仅显示出于Listen(监听)状态的</span><br><span class="line">-p 显示建立</span><br></pre></td></tr></table></figure>



<h1 id="十八、创建指定大小的文件"><a href="#十八、创建指定大小的文件" class="headerlink" title="十八、创建指定大小的文件"></a>十八、创建指定大小的文件</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建一个20M，文件名为test</span></span><br><span class="line">fallocate -l 20M <span class="built_in">test</span></span><br><span class="line"><span class="comment">#创建50个1M的文件</span></span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=filename bs=1M count=50</span><br></pre></td></tr></table></figure>



<h1 id="十九、查找文件命令find"><a href="#十九、查找文件命令find" class="headerlink" title="十九、查找文件命令find"></a>十九、查找文件命令find</h1><p>find 目录 +定义类型 + f&#x2F;d（文件或者目录）+ 行为（name，size等）+其他条件</p>
<p>find .&#x2F; -type f -size +10M :f表示文件类型，“+”表示大于，“-”表示小于，命令意思为，找到当下目录下及其所有子目录，大&#x2F;小于10M的文件（M要大写）</p>
<p>find .&#x2F; -type d -empty|xargs rm -rf 删除当前路径下，所有为空的目录</p>
<p>find .&#x2F; -mtime -3 :找到3天内的文件</p>
<p>find .&#x2F; -mtime +3 :找到3天以前的文件</p>
<p>find .&#x2F; -name ‘<em>test</em>‘ ：查找包含test的文件</p>
<p>find .|xargs grep abc :找到包含“abc”内容的文件</p>
<h1 id="二十、查看文件里面内容"><a href="#二十、查看文件里面内容" class="headerlink" title="二十、查看文件里面内容"></a>二十、查看文件里面内容</h1><p>cat passwd 查看文件的内容</p>
<p>cat -n passwd 显示行号</p>
<p>tail -200 日志文件 ，查看日志文件后200行</p>
<p>tail -f 日志文件 ，查看动态日志边操作，边看日志文件</p>
<p>head -200 前200行</p>
<p>head -200 access_log|cat -n 查看前200后，并且显示行号</p>
<p>more,less 分页查看文件的内容</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo上markdown图片路径与Typora保持一致</title>
    <url>/2015/06/17/Hexo%E4%B8%8Amarkdown%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%E4%B8%8ETypora%E4%BF%9D%E6%8C%81%E4%B8%80%E8%87%B4/</url>
    <content><![CDATA[<p>Typora是一款很好用的markdown语法编辑器，我希望使用Typora写好博客后，直接通过hexo部署到个人博客主页上面去。但有个问题是，如果markdown文件里面有图片路径时，在部署到hexo上时需要重新修改图片路径，否则会有问题。每次手动修改显然很麻烦，因此需要看看hexo是否有比较友好的支持。</p>
<p>Typora本地插入图片的路径有两种方式：一个是绝对路径，一个是相对路径（相对于当前文件所在的路径）。</p>
<p>Hexo通过<code>hexo-renderer-marked</code>插件实现了对markdown语法的支持，其中默认插入图片的方式为 <code>![](/images/image.jpg)</code> ，它是一个相对路径（相对于Hexo工作目录下的 <code>source</code> 文件夹）的方式。</p>
<p>首先，如果Typora使用本地的绝对路径插入图片，那么在执行 <code>hexo g</code> 时需要将本地的绝对路径转换成对应的相对路径，这个目前暂未看到有相关的插件实现。</p>
<p>其次，如果Typora使用相对路径插入图片，问题在于Typora和Hexo所相对的路径是不一致的。对此，Hexo提供了一个更组织化的方式来管理资源，可以通过将 <code>_config.yml</code> 配置文件中的 <code>post_asset_folder</code> 选项设置为 <code>true</code> 来打开。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>该功能打开后，Hexo将会在你每一次通过 <code>hexo new [layout] &lt;title&gt;</code> 命令创建新文章时自动创建一个文件夹。这个资源文件夹名与这个文章文件名相同。将所有与你的文章有关的资源（如图片）放在这个关联文件夹中之后，你可以通过相对路径来引用它们。如，我使用 <code>hexo new mytitle</code> 创建了一篇文章 <code>mytitle.md</code> ，会同时在该文章文件所在的路径上创建文件夹 <code>mytitle/</code>，我们在该文件夹里面添加图片 <code>mytitle/my.png</code>，这时我们在 <code>mytitle.md</code> 文件中插入该图片的方式为 <code>![](my.png)</code> 就可以了。</p>
<p>跟Typora很接近了，但Typora需要的是 <code>&#123;% asset_img my.png %&#125;</code> （此处显示有个bug，Hexo自动将满足 <code>mytitle/my.png</code> 格式的图片路径转换成Hexo图片标签插件了，而实际上这里我用了反引号，按理说不应该转义的。。。），即</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="type">{% asset_img "my.png" "" %}</span></span><br></pre></td></tr></table></figure>

<p>因此还需要一步转换：<code>mytitle/my.png -&gt; my.png</code> 。幸运的是，Hexo提供了一款插件 <code>hexo-image-link</code> 来实现这一步转换，在Hexo根目录下执行 <code>npm install hexo-image-link --save</code> 安装该插件即可，无需额外的配置。</p>
<p>至此，问题解决！总结下来操作上只需要做两个步骤即可：</p>
<ol>
<li>安装插件 <code>hexo-image-link</code></li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-image-link</span> <span class="string">--save</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>打开Hexo资源管理配置开关</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="归纳总结"><a href="#归纳总结" class="headerlink" title="归纳总结"></a>归纳总结</h2><ul>
<li><p>修改<code>_config.yml</code>中的<code>post_asset_folder: true</code></p>
</li>
<li><p>$ npm install hexo-image-link –save</p>
</li>
<li><p>如果 npm下载比较慢的话，尝试 cnpm下载</p>
<ul>
<li>$ npm install -g cnpm –registry&#x3D;<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></li>
<li>$ cnpm install hexo-image-link –save</li>
</ul>
</li>
<li><p>修改md文件中的图片路径</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">label</span>](<span class="link">markdown-file-name/image-name.jpg</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON工具类</title>
    <url>/2023/11/21/JSON%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="Maven引入Jackson"><a href="#Maven引入Jackson" class="headerlink" title="Maven引入Jackson"></a>Maven引入Jackson</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jackson.version</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">jackson.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-datatype-jsr310<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-yaml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-smile<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-cbor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="具体代码实现"><a href="#具体代码实现" class="headerlink" title="具体代码实现"></a>具体代码实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonInclude;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.type.TypeReference;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.DeserializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.<span class="keyword">module</span>.SimpleModule;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ser.std.ToStringSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> z```s</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> java8</span></span><br><span class="line"><span class="comment"> * 2020/5/11 10:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JSON</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">OBJECT_MAPPER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DATE_TIME_FORMAT_01</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">SimpleDateFormat</span> <span class="variable">SIMPLE_DATE_FORMAT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(DATE_TIME_FORMAT_01);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        OBJECT_MAPPER.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line">        OBJECT_MAPPER.setSerializationInclusion(JsonInclude.Include.NON_NULL);</span><br><span class="line">        <span class="comment">//OBJECT_MAPPER.setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);</span></span><br><span class="line">        <span class="type">SimpleModule</span> <span class="variable">simpleModule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleModule</span>();</span><br><span class="line">        simpleModule.addSerializer(Long.class, ToStringSerializer.instance);</span><br><span class="line">        simpleModule.addSerializer(Long.TYPE, ToStringSerializer.instance);</span><br><span class="line">        simpleModule.addSerializer(Double.class, ToStringSerializer.instance);</span><br><span class="line">        simpleModule.addSerializer(Double.TYPE, ToStringSerializer.instance);</span><br><span class="line">        simpleModule.addSerializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT_01)));</span><br><span class="line">        simpleModule.addDeserializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT_01)));</span><br><span class="line">        OBJECT_MAPPER.registerModule(simpleModule);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">JSON</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将json文件转换为JSON对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">jsonFileParseObject</span><span class="params">(String filePath, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> OBJECT_MAPPER.readValue(<span class="keyword">new</span> <span class="title class_">File</span>(filePath), clazz);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对象转换JSON字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toJSONString</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> OBJECT_MAPPER.writeValueAsString(object);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JSON字符串转换对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">parseObject</span><span class="params">(String text, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> OBJECT_MAPPER.readValue(text, clazz);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JSON字符串转换为List</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">parseArray</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        TypeReference&lt;ArrayList&lt;T&gt;&gt; typeReference = <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;ArrayList&lt;T&gt;&gt;() &#123;&#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> OBJECT_MAPPER.readValue(text, typeReference);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JSON字符串转换为Map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; LinkedHashMap&lt;String, T&gt; <span class="title function_">parseMap</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        TypeReference&lt;LinkedHashMap&lt;String, T&gt;&gt; typeReference = <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;LinkedHashMap&lt;String, T&gt;&gt;() &#123;&#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> OBJECT_MAPPER.readValue(text, typeReference);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
        <category>JSON</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM指令手册</title>
    <url>/2022/05/08/JVM%E6%8C%87%E4%BB%A4%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h3 id="栈和局部变量操作"><a href="#栈和局部变量操作" class="headerlink" title="栈和局部变量操作"></a>栈和局部变量操作</h3><h4 id="将常量压入栈的指令"><a href="#将常量压入栈的指令" class="headerlink" title="将常量压入栈的指令"></a>将常量压入栈的指令</h4><p>aconst_null 将null对象引用压入栈<br>iconst_m1 将int类型常量-1压入栈<br>iconst_0 将int类型常量0压入栈<br>iconst_1 将int类型常量1压入栈<br>iconst_2 将int类型常量2压入栈<br>iconst_3 将int类型常量3压入栈<br>iconst_4 将int类型常量4压入栈<br>iconst_5 将int类型常量5压入栈<br>lconst_0 将long类型常量0压入栈<br>lconst_1 将long类型常量1压入栈<br>fconst_0 将float类型常量0压入栈<br>fconst_1 将float类型常量1压入栈<br>dconst_0 将double类型常量0压入栈<br>dconst_1 将double类型常量1压入栈<br>bipush 将一个8位带符号整数压入栈<br>sipush 将16位带符号整数压入栈<br>ldc 把常量池中的项压入栈<br>ldc_w 把常量池中的项压入栈（使用宽索引）<br>ldc2_w 把常量池中long类型或者double类型的项压入栈（使用宽索引）<br>从栈中的局部变量中装载值的指令<br>iload 从局部变量中装载int类型值<br>lload 从局部变量中装载long类型值<br>fload 从局部变量中装载float类型值<br>dload 从局部变量中装载double类型值<br>aload 从局部变量中装载引用类型值（refernce）<br>iload_0 从局部变量0中装载int类型值<br>iload_1 从局部变量1中装载int类型值<br>iload_2 从局部变量2中装载int类型值<br>iload_3 从局部变量3中装载int类型值<br>lload_0 从局部变量0中装载long类型值<br>lload_1 从局部变量1中装载long类型值<br>lload_2 从局部变量2中装载long类型值<br>lload_3 从局部变量3中装载long类型值<br>fload_0 从局部变量0中装载float类型值<br>fload_1 从局部变量1中装载float类型值<br>fload_2 从局部变量2中装载float类型值<br>fload_3 从局部变量3中装载float类型值<br>dload_0 从局部变量0中装载double类型值<br>dload_1 从局部变量1中装载double类型值<br>dload_2 从局部变量2中装载double类型值<br>dload_3 从局部变量3中装载double类型值<br>aload_0 从局部变量0中装载引用类型值<br>aload_1 从局部变量1中装载引用类型值<br>aload_2 从局部变量2中装载引用类型值<br>aload_3 从局部变量3中装载引用类型值<br>iaload 从数组中装载int类型值<br>laload 从数组中装载long类型值<br>faload 从数组中装载float类型值<br>daload 从数组中装载double类型值<br>aaload 从数组中装载引用类型值<br>baload 从数组中装载byte类型或boolean类型值<br>caload 从数组中装载char类型值<br>saload 从数组中装载short类型值</p>
<h4 id="将栈中的值存入局部变量的指令"><a href="#将栈中的值存入局部变量的指令" class="headerlink" title="将栈中的值存入局部变量的指令"></a>将栈中的值存入局部变量的指令</h4><p>istore 将int类型值存入局部变量<br>lstore 将long类型值存入局部变量<br>fstore 将float类型值存入局部变量<br>dstore 将double类型值存入局部变量<br>astore 将将引用类型或returnAddress类型值存入局部变量<br>istore_0 将int类型值存入局部变量0<br>istore_1 将int类型值存入局部变量1<br>istore_2 将int类型值存入局部变量2<br>istore_3 将int类型值存入局部变量3<br>lstore_0 将long类型值存入局部变量0<br>lstore_1 将long类型值存入局部变量1<br>lstore_2 将long类型值存入局部变量2<br>lstore_3 将long类型值存入局部变量3<br>fstore_0 将float类型值存入局部变量0<br>fstore_1 将float类型值存入局部变量1<br>fstore_2 将float类型值存入局部变量2<br>fstore_3 将float类型值存入局部变量3<br>dstore_0 将double类型值存入局部变量0<br>dstore_1 将double类型值存入局部变量1<br>dstore_2 将double类型值存入局部变量2<br>dstore_3 将double类型值存入局部变量3<br>astore_0 将引用类型或returnAddress类型值存入局部变量0<br>astore_1 将引用类型或returnAddress类型值存入局部变量1<br>astore_2 将引用类型或returnAddress类型值存入局部变量2<br>astore_3 将引用类型或returnAddress类型值存入局部变量3<br>iastore 将int类型值存入数组中<br>lastore 将long类型值存入数组中<br>fastore 将float类型值存入数组中<br>dastore 将double类型值存入数组中<br>aastore 将引用类型值存入数组中<br>bastore 将byte类型或者boolean类型值存入数组中<br>castore 将char类型值存入数组中<br>sastore 将short类型值存入数组中</p>
<h3 id="wide指令"><a href="#wide指令" class="headerlink" title="wide指令"></a>wide指令</h3><p>wide 使用附加字节扩展局部变量索引</p>
<h3 id="通用（无类型）栈操作"><a href="#通用（无类型）栈操作" class="headerlink" title="通用（无类型）栈操作"></a>通用（无类型）栈操作</h3><p>nop 不做任何操作<br>pop 弹出栈顶端一个字长的内容<br>pop2 弹出栈顶端两个字长的内容<br>dup 复制栈顶部一个字长内容<br>dup_x1 复制栈顶部一个字长的内容，然后将复制内容及原来弹出的两个字长的内容压入栈<br>dup_x2 复制栈顶部一个字长的内容，然后将复制内容及原来弹出的三个字长的内容压入栈<br>dup2 复制栈顶部两个字长内容<br>dup2_x1 复制栈顶部两个字长的内容，然后将复制内容及原来弹出的三个字长的内容压入栈<br>dup2_x2 复制栈顶部两个字长的内容，然后将复制内容及原来弹出的四个字长的内容压入栈<br>swap 交换栈顶部两个字长内容</p>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>i2l 把int类型的数据转化为long类型<br>i2f 把int类型的数据转化为float类型<br>i2d 把int类型的数据转化为double类型<br>l2i 把long类型的数据转化为int类型<br>l2f 把long类型的数据转化为float类型<br>l2d 把long类型的数据转化为double类型<br>f2i 把float类型的数据转化为int类型<br>f2l 把float类型的数据转化为long类型<br>f2d 把float类型的数据转化为double类型<br>d2i 把double类型的数据转化为int类型<br>d2l 把double类型的数据转化为long类型<br>d2f 把double类型的数据转化为float类型<br>i2b 把int类型的数据转化为byte类型<br>i2c 把int类型的数据转化为char类型<br>i2s 把int类型的数据转化为short类型</p>
<h3 id="整数运算"><a href="#整数运算" class="headerlink" title="整数运算"></a>整数运算</h3><p>iadd 执行int类型的加法<br>ladd 执行long类型的加法<br>isub 执行int类型的减法<br>lsub 执行long类型的减法<br>imul 执行int类型的乘法<br>lmul 执行long类型的乘法<br>idiv 执行int类型的除法<br>ldiv 执行long类型的除法<br>irem 计算int类型除法的余数<br>lrem 计算long类型除法的余数<br>ineg 对一个int类型值进行取反操作<br>lneg 对一个long类型值进行取反操作<br>iinc 把一个常量值加到一个int类型的局部变量上</p>
<h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><h4 id="移位操作"><a href="#移位操作" class="headerlink" title="移位操作"></a>移位操作</h4><p>ishl 执行int类型的向左移位操作<br>lshl 执行long类型的向左移位操作<br>ishr 执行int类型的向右移位操作<br>lshr 执行long类型的向右移位操作<br>iushr 执行int类型的向右逻辑移位操作<br>lushr 执行long类型的向右逻辑移位操作</p>
<h4 id="按位布尔运算"><a href="#按位布尔运算" class="headerlink" title="按位布尔运算"></a>按位布尔运算</h4><p>iand 对int类型值进行“逻辑与”操作<br>land 对long类型值进行“逻辑与”操作<br>ior 对int类型值进行“逻辑或”操作<br>lor 对long类型值进行“逻辑或”操作<br>ixor 对int类型值进行“逻辑异或”操作<br>lxor 对long类型值进行“逻辑异或”操作</p>
<h3 id="浮点运算"><a href="#浮点运算" class="headerlink" title="浮点运算"></a>浮点运算</h3><p>fadd 执行float类型的加法<br>dadd 执行double类型的加法<br>fsub 执行float类型的减法<br>dsub 执行double类型的减法<br>fmul 执行float类型的乘法<br>dmul 执行double类型的乘法<br>fdiv 执行float类型的除法<br>ddiv 执行double类型的除法<br>frem 计算float类型除法的余数<br>drem 计算double类型除法的余数<br>fneg 将一个float类型的数值取反<br>dneg 将一个double类型的数值取反</p>
<h3 id="对象和数组"><a href="#对象和数组" class="headerlink" title="对象和数组"></a>对象和数组</h3><h4 id="对象操作指令"><a href="#对象操作指令" class="headerlink" title="对象操作指令"></a>对象操作指令</h4><p>new 创建一个新对象<br>checkcast 确定对象为所给定的类型<br>getfield 从对象中获取字段<br>putfield 设置对象中字段的值<br>getstatic 从类中获取静态字段<br>putstatic 设置类中静态字段的值<br>instanceof 判断对象是否为给定的类型</p>
<h4 id="数组操作指令"><a href="#数组操作指令" class="headerlink" title="数组操作指令"></a>数组操作指令</h4><p>newarray 分配数据成员类型为基本上数据类型的新数组<br>anewarray 分配数据成员类型为引用类型的新数组<br>arraylength 获取数组长度<br>multianewarray 分配新的多维数组 </p>
<h3 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h3><h4 id="条件分支指令"><a href="#条件分支指令" class="headerlink" title="条件分支指令"></a>条件分支指令</h4><p>ifeq 如果等于0，则跳转<br>ifne 如果不等于0，则跳转<br>iflt 如果小于0，则跳转<br>ifge 如果大于等于0，则跳转<br>ifgt 如果大于0，则跳转<br>ifle 如果小于等于0，则跳转<br>if_icmpcq 如果两个int值相等，则跳转<br>if_icmpne 如果两个int类型值不相等，则跳转<br>if_icmplt 如果一个int类型值小于另外一个int类型值，则跳转<br>if_icmpge 如果一个int类型值大于或者等于另外一个int类型值，则跳转<br>if_icmpgt 如果一个int类型值大于另外一个int类型值，则跳转<br>if_icmple 如果一个int类型值小于或者等于另外一个int类型值，则跳转<br>ifnull 如果等于null，则跳转<br>ifnonnull 如果不等于null，则跳转<br>if_acmpeq 如果两个对象引用相等，则跳转<br>if_acmpnc 如果两个对象引用不相等，则跳转</p>
<h4 id="比较指令"><a href="#比较指令" class="headerlink" title="比较指令"></a>比较指令</h4><p>lcmp 比较long类型值<br>fcmpl 比较float类型值（当遇到NaN时，返回-1）<br>fcmpg 比较float类型值（当遇到NaN时，返回1）<br>dcmpl 比较double类型值（当遇到NaN时，返回-1）<br>dcmpg 比较double类型值（当遇到NaN时，返回1）</p>
<h3 id="无条件转移指令"><a href="#无条件转移指令" class="headerlink" title="无条件转移指令"></a>无条件转移指令</h3><p>goto 无条件跳转<br>goto_w 无条件跳转（宽索引）</p>
<h3 id="表跳转指令"><a href="#表跳转指令" class="headerlink" title="表跳转指令"></a>表跳转指令</h3><p>tableswitch 通过索引访问跳转表，并跳转<br>lookupswitch 通过键值匹配访问跳转表，并执行跳转操作</p>
<h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>athrow 抛出异常或错误<br>finally子句<br>jsr 跳转到子例程<br>jsr_w 跳转到子例程（宽索引）<br>rct 从子例程返回<br>方法调用与返回<br>方法调用指令<br>invokcvirtual 运行时按照对象的类来调用实例方法<br>invokespecial 根据编译时类型来调用实例方法<br>invokestatic 调用类（静态）方法<br>invokcinterface 调用接口方法</p>
<h3 id="方法返回指令"><a href="#方法返回指令" class="headerlink" title="方法返回指令"></a>方法返回指令</h3><p>ireturn 从方法中返回int类型的数据<br>lreturn 从方法中返回long类型的数据<br>freturn 从方法中返回float类型的数据<br>dreturn 从方法中返回double类型的数据<br>areturn 从方法中返回引用类型的数据<br>return 从方法中返回，返回值为void</p>
<h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><p>montiorenter 进入并获取对象监视器<br>monitorexit 释放并退出对象监视器</p>
<h3 id="JVM指令助记符"><a href="#JVM指令助记符" class="headerlink" title="JVM指令助记符"></a>JVM指令助记符</h3><p>变量到操作数栈：iload,iload_,lload,lload_,fload,fload_,dload,dload_,aload,aload_<br>操作数栈到变量：istore,istore_,lstore,lstore_,fstore,fstore_,dstore,dstor_,astore,astore_<br>常数到操作数栈：bipush,sipush,ldc,ldc_w,ldc2_w,aconst_null,iconst_ml,iconst_,lconst_,fconst_,dconst_<br>加：iadd,ladd,fadd,dadd<br>减：isub,lsub,fsub,dsub<br>乘：imul,lmul,fmul,dmul<br>除：idiv,ldiv,fdiv,ddiv<br>余数：irem,lrem,frem,drem<br>取负：ineg,lneg,fneg,dneg<br>移位：ishl,lshr,iushr,lshl,lshr,lushr<br>按位或：ior,lor<br>按位与：iand,land<br>按位异或：ixor,lxor<br>类型转换：i2l,i2f,i2d,l2f,l2d,f2d(放宽数值转换)<br>i2b,i2c,i2s,l2i,f2i,f2l,d2i,d2l,d2f(缩窄数值转换)<br>创建类实便：new<br>创建新数组：newarray,anewarray,multianwarray<br>访问类的域和类实例域：getfield,putfield,getstatic,putstatic<br>把数据装载到操作数栈：baload,caload,saload,iaload,laload,faload,daload,aaload<br>从操作数栈存存储到数组：bastore,castore,sastore,iastore,lastore,fastore,dastore,aastore<br>获取数组长度：arraylength<br>检相类实例或数组属性：instanceof,checkcast<br>操作数栈管理：pop,pop2,dup,dup2,dup_xl,dup2_xl,dup_x2,dup2_x2,swap<br>有条件转移：ifeq,iflt,ifle,ifne,ifgt,ifge,ifnull,ifnonnull,if_icmpeq,if_icmpene,<br>if_icmplt,if_icmpgt,if_icmple,if_icmpge,if_acmpeq,if_acmpne,lcmp,fcmpl<br>fcmpg,dcmpl,dcmpg<br>复合条件转移：tableswitch,lookupswitch<br>无条件转移：goto,goto_w,jsr,jsr_w,ret<br>调度对象的实便方法：invokevirtual<br>调用由接口实现的方法：invokeinterface<br>调用需要特殊处理的实例方法：invokespecial<br>调用命名类中的静态方法：invokestatic<br>方法返回：ireturn,lreturn,freturn,dreturn,areturn,return<br>异常：athrow<br>finally关键字的实现使用：jsr,jsr_w,ret</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Java环境变量配置</title>
    <url>/2015/09/27/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><p>官网下载适用版本JDK安装包，进行安装（下载过程，和安装过程此处忽略截图配置）</p>
<p>接下来按照以下几个操作步骤：</p>
<ol>
<li>我的电脑→右键→属性</li>
<li>点击高级系统设置</li>
</ol>
<img src="/2015/09/27/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/windows%E9%AB%98%E7%BA%A7%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE.jpg" class title="windows高级系统设置">

<ol start="3">
<li>点击系统属性→环境变量</li>
</ol>
<img src="/2015/09/27/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/windows%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.jpg" class title="环境变量">

<ol start="4">
<li>打开之后，我们在下方的系统变量中，找到新建按钮，点击打开</li>
</ol>
<img src="/2015/09/27/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/windows%E6%96%B0%E5%BB%BA.jpg" class title="环境变量">

<ol start="5">
<li>新建一个系统变量“JAVA_HOME”，然后手动选择你JDK安装的位置，点击确定</li>
<li>新建一个叫做“CLASSPATH”的环境变量，变量值输入“;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;”</li>
</ol>
<img src="/2015/09/27/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/windowsclasspath.jpg" class title="环境变量">

<ol start="7">
<li>找到系统变量Path，点击打开编辑，然后点击新建，找到JDK的目录，然后点击打开JDK下面的bin目录，复制地址，添加到目录中，如图示</li>
</ol>
<img src="/2015/09/27/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/windowspath.jpg" class title="环境变量">

<ol start="8">
<li>点击确定之后，我们打开命令提示符，输入Java，如图示有图示显示</li>
</ol>
<img src="/2015/09/27/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/windowsjava.jpg" class title="环境变量">

<ol start="9">
<li>再次输入Javac，显示如图则按照正常</li>
</ol>
<img src="/2015/09/27/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/windowsjavac.jpg" class title="环境变量">

<h2 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h2><ol>
<li>centos下的JDK环境配置分两种情况，一直是root用户级别的jdk配置，另一种是其他用户组级别的配置。这里讲解的是root用户级别的配置。</li>
</ol>
<img src="/2015/09/27/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/centosjdkpath.jpg" class title="环境变量">

<pre><code>2. 编辑环境变量的配置文件
</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure>

<p> 在尾部增加如下代码： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/java/jdk1.8.0_181</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure>

<p> 同时修改export JAVA_HOME&#x3D;<strong>自己linux上的jdk存放位置</strong>。其他两行不需要修改 </p>
<ol start="3">
<li>让环境变量配置生效</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>使用java以及javac命令查询配置是否生效</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
        <category>环境变量</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>环境变量</tag>
      </tags>
  </entry>
  <entry>
    <title>Postgresql行列转换</title>
    <url>/2019/03/28/Postgresql%E8%A1%8C%E5%88%97%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>Postgresql 9.4.4</p>
<h4 id="列转行"><a href="#列转行" class="headerlink" title="列转行"></a>列转行</h4><ol>
<li>查询某表数据</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test;</span><br><span class="line"></span><br><span class="line">name</span><br><span class="line"><span class="comment">------  </span></span><br><span class="line">AA  </span><br><span class="line">BB  </span><br><span class="line">CC  </span><br><span class="line">(<span class="number">3</span> <span class="keyword">rows</span>)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>列转行（string_agg）</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> string_agg(name,<span class="string">&#x27;,&#x27;</span>) <span class="keyword">from</span> test;</span><br><span class="line"></span><br><span class="line">string_agg  </span><br><span class="line"><span class="comment">------------  </span></span><br><span class="line">AA,BB,CC  </span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br></pre></td></tr></table></figure>

<h4 id="行转列"><a href="#行转列" class="headerlink" title="行转列"></a>行转列</h4><ol>
<li>查询测试表数据</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test;</span><br><span class="line"></span><br><span class="line">name  </span><br><span class="line"><span class="comment">-----------  </span></span><br><span class="line">A,B,C,D,E  </span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>行转列（regexp_split_to_table）</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> regexp_split_to_table(name,<span class="string">&#x27;,&#x27;</span>) <span class="keyword">from</span> test;</span><br><span class="line"></span><br><span class="line">regexp_split_to_table  </span><br><span class="line"><span class="comment">-----------------------  </span></span><br><span class="line">A  </span><br><span class="line">B  </span><br><span class="line">C  </span><br><span class="line">D  </span><br><span class="line">E  </span><br><span class="line">(<span class="number">5</span> <span class="keyword">rows</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
        <category>Postgresql</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title>Git操作</title>
    <url>/2016/04/09/git%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h5 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h5><p>新建git仓库，创建新文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>添加文件到git索引</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">git add <span class="tag">&lt;<span class="name">filename</span>&gt;</span> ---单个文件添加</span><br><span class="line">git add .          ---全部文件添加</span><br></pre></td></tr></table></figure>

<p>提交到本地仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;备注&quot;</span></span><br></pre></td></tr></table></figure>

<p>提交到远端仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push [origin &lt;master&gt;]</span><br></pre></td></tr></table></figure>

<h5 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h5><p>创建一个分支，并切换到分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b &lt;branchname&gt;</span><br></pre></td></tr></table></figure>

<p>切换回master</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure>

<p>把新建的分支删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d &lt;branchname&gt;</span><br></pre></td></tr></table></figure>

<p>push分支到远端仓库（push到远端之前，该分支不被其他人所见）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin &lt;branchname&gt;</span><br></pre></td></tr></table></figure>

<h5 id="更新与合并"><a href="#更新与合并" class="headerlink" title="更新与合并"></a>更新与合并</h5><p>更新本地仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>

<p>合并分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge &lt;branchname&gt;</span><br></pre></td></tr></table></figure>

<p>合并后需要添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add &lt;branchname&gt;</span><br></pre></td></tr></table></figure>

<p>版本比对（合并前使用）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff &lt;source_branch&gt; &lt;target_branch&gt;</span><br></pre></td></tr></table></figure>

<p>获取提交ID</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<p>创建标签</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag &lt;tagname&gt; [commit_id]</span><br></pre></td></tr></table></figure>

<p>回退到指定版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard &lt;commit_id&gt;</span><br></pre></td></tr></table></figure>

<p>使用reset命令后log是得不到充分信息的，这时我们需要使用reflog，然后再reset</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure>

<p>彩色git输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config color.ui <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>查看远程分支与本地分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>

<p>删除远程分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin --delete &lt;branch_name&gt;</span><br></pre></td></tr></table></figure>

<p>使用rm误删了文件，可以通过两步恢复</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset HEAD &lt;file_name&gt;</span><br><span class="line">git checkout -- &lt;file_name&gt;</span><br></pre></td></tr></table></figure>

<p>删除文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> &lt;file_name&gt;				<span class="comment">###同时删除工作目录与本地仓库的文件</span></span><br><span class="line">git <span class="built_in">rm</span> --cached &lt;file_name&gt;     <span class="comment">###删除本地仓库文件，并不影响工作目录</span></span><br></pre></td></tr></table></figure>

<p>改变远程地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote set-url origin &lt;git_origin_url&gt;</span><br></pre></td></tr></table></figure>

<p>根据服务器地址创建本地git与服务器地址关联</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin &lt;git_origin_url&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Git</category>
        <category>命令行</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>命令行</tag>
      </tags>
  </entry>
  <entry>
    <title>Snowflake算法个人改造版</title>
    <url>/2021/01/15/Snowflake%E7%AE%97%E6%B3%95%E4%B8%AA%E4%BA%BA%E6%94%B9%E9%80%A0%E7%89%88/</url>
    <content><![CDATA[<h2 id="Snowflake算法"><a href="#Snowflake算法" class="headerlink" title="Snowflake算法"></a>Snowflake算法</h2><blockquote>
<p>snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0。 </p>
</blockquote>
<img src="/2021/01/15/Snowflake%E7%AE%97%E6%B3%95%E4%B8%AA%E4%BA%BA%E6%94%B9%E9%80%A0%E7%89%88/%E6%9E%84%E6%88%90%E5%9B%BE.png" class title="构成图">

<h3 id="详细改造点"><a href="#详细改造点" class="headerlink" title="详细改造点"></a>详细改造点</h3><p>将标志workerId和dataCenterId的10位分别改造为，获取本机mac地址以及获取本机运行进程编号</p>
<p>以往workerId和dataCenterId需要手动输入，如果跨机器输入了同样的代码，可能会导致出现不同机器生成相同代码的可能性</p>
<h3 id="原版算法代码"><a href="#原版算法代码" class="headerlink" title="原版算法代码"></a>原版算法代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Twitter_Snowflake&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * SnowFlake的结构如下(每部分用-分开):&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000 &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 1位标识，由于long基本类型在Java中是带符号的，最高位是符号位，正数是0，负数是1，所以id一般是正数，最高位是0&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 41位时间截(毫秒级)，注意，41位时间截不是存储当前时间的时间截，而是存储时间截的差值（当前时间截 - 开始时间截)</span></span><br><span class="line"><span class="comment"> * 得到的值），这里的的开始时间截，一般是我们的id生成器开始使用的时间，由我们程序来指定的（如下下面程序IdWorker类的startTime属性）。41位的时间截，可以使用69年，年T = (1L &lt;&lt; 41) / (1000L * 60 * 60 * 24 * 365) = 69&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 10位的数据机器位，可以部署在1024个节点，包括5位datacenterId和5位workerId&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 12位序列，毫秒内的计数，12位的计数顺序号支持每个节点每毫秒(同一机器，同一时间截)产生4096个ID序号&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 加起来刚好64位，为一个Long型。&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * SnowFlake的优点是，整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞(由数据中心ID和机器ID作区分)，并且效率较高，经测试，SnowFlake每秒能够产生26万ID左右。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SnowflakeIdWorker</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==============================Fields===========================================</span></span><br><span class="line">    <span class="comment">/** 开始时间截 (2015-01-01) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">twepoch</span> <span class="operator">=</span> <span class="number">1420041600000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 机器id所占的位数 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">workerIdBits</span> <span class="operator">=</span> <span class="number">5L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 数据标识id所占的位数 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">datacenterIdBits</span> <span class="operator">=</span> <span class="number">5L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">maxWorkerId</span> <span class="operator">=</span> -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; workerIdBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 支持的最大数据标识id，结果是31 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">maxDatacenterId</span> <span class="operator">=</span> -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; datacenterIdBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 序列在id中占的位数 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">sequenceBits</span> <span class="operator">=</span> <span class="number">12L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 机器ID向左移12位 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">workerIdShift</span> <span class="operator">=</span> sequenceBits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 数据标识id向左移17位(12+5) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">datacenterIdShift</span> <span class="operator">=</span> sequenceBits + workerIdBits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 时间截向左移22位(5+5+12) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">timestampLeftShift</span> <span class="operator">=</span> sequenceBits + workerIdBits + datacenterIdBits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">sequenceMask</span> <span class="operator">=</span> -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; sequenceBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 工作机器ID(0~31) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> workerId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 数据中心ID(0~31) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> datacenterId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 毫秒内序列(0~4095) */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">sequence</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 上次生成ID的时间截 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">lastTimestamp</span> <span class="operator">=</span> -<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//==============================Constructors=====================================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> workerId 工作ID (0~31)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> datacenterId 数据中心ID (0~31)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SnowflakeIdWorker</span><span class="params">(<span class="type">long</span> workerId, <span class="type">long</span> datacenterId)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(String.format(<span class="string">&quot;worker Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxWorkerId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(String.format(<span class="string">&quot;datacenter Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxDatacenterId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.workerId = workerId;</span><br><span class="line">        <span class="built_in">this</span>.datacenterId = datacenterId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==============================Methods==========================================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得下一个ID (该方法是线程安全的)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SnowflakeId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">long</span> <span class="title function_">nextId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> timeGen();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (timestamp &lt; lastTimestamp) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(</span><br><span class="line">                    String.format(<span class="string">&quot;Clock moved backwards.  Refusing to generate id for %d milliseconds&quot;</span>, lastTimestamp - timestamp));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果是同一时间生成的，则进行毫秒内序列</span></span><br><span class="line">        <span class="keyword">if</span> (lastTimestamp == timestamp) &#123;</span><br><span class="line">            sequence = (sequence + <span class="number">1</span>) &amp; sequenceMask;</span><br><span class="line">            <span class="comment">//毫秒内序列溢出</span></span><br><span class="line">            <span class="keyword">if</span> (sequence == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//阻塞到下一个毫秒,获得新的时间戳</span></span><br><span class="line">                timestamp = tilNextMillis(lastTimestamp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//时间戳改变，毫秒内序列重置</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            sequence = <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上次生成ID的时间截</span></span><br><span class="line">        lastTimestamp = timestamp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//移位并通过或运算拼到一起组成64位的ID</span></span><br><span class="line">        <span class="keyword">return</span> ((timestamp - twepoch) &lt;&lt; timestampLeftShift) <span class="comment">//</span></span><br><span class="line">                | (datacenterId &lt;&lt; datacenterIdShift) <span class="comment">//</span></span><br><span class="line">                | (workerId &lt;&lt; workerIdShift) <span class="comment">//</span></span><br><span class="line">                | sequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阻塞到下一个毫秒，直到获得新的时间戳</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lastTimestamp 上次生成ID的时间截</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">long</span> <span class="title function_">tilNextMillis</span><span class="params">(<span class="type">long</span> lastTimestamp)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> timeGen();</span><br><span class="line">        <span class="keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;</span><br><span class="line">            timestamp = timeGen();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回以毫秒为单位的当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前时间(毫秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">long</span> <span class="title function_">timeGen</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//==============================Test=============================================</span></span><br><span class="line">    <span class="comment">/** 测试 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SnowflakeIdWorker</span> <span class="variable">idWorker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SnowflakeIdWorker</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> idWorker.nextId();</span><br><span class="line">            System.out.println(Long.toBinaryString(id));</span><br><span class="line">            System.out.println(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="改造后代码"><a href="#改造后代码" class="headerlink" title="改造后代码"></a>改造后代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xxx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.management.ManagementFactory;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.NetworkInterface;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Twitter_Snowflake&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * SnowFlake的结构如下(每部分用-分开):&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000 &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 1位标识，由于long基本类型在Java中是带符号的，最高位是符号位，正数是0，负数是1，所以id一般是正数，最高位是0&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 41位时间截(毫秒级)，注意，41位时间截不是存储当前时间的时间截，而是存储时间截的差值（当前时间截 - 开始时间截)</span></span><br><span class="line"><span class="comment"> * 得到的值），这里的的开始时间截，一般是我们的id生成器开始使用的时间，由我们程序来指定的（如下下面程序IdWorker类的startTime属性）。41位的时间截，可以使用69年，年T</span></span><br><span class="line"><span class="comment"> * = (1L &lt;&lt; 41) / (1000L * 60 * 60 * 24 * 365) = 69&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 10位的数据机器位，可以部署在1024个节点，包括5位datacenterId和5位workerId&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 12位序列，毫秒内的计数，12位的计数顺序号支持每个节点每毫秒(同一机器，同一时间截)产生4096个ID序号&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 加起来刚好64位，为一个Long型。&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * SnowFlake的优点是，整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞(由数据中心ID和机器ID作区分)，并且效率较高，经测试，SnowFlake每秒能够产生26万ID左右。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SnowflakeIdWorker</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==============================Fields===========================================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始时间截 (2015-01-01)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">startTimestamp</span> <span class="operator">=</span> <span class="number">1420041600000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机器id所占的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">workerIdBits</span> <span class="operator">=</span> <span class="number">5L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据标识id所占的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">dataCenterIdBits</span> <span class="operator">=</span> <span class="number">5L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">maxWorkerId</span> <span class="operator">=</span> -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; workerIdBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持的最大数据标识id，结果是31</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">maxDataCenterId</span> <span class="operator">=</span> -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; dataCenterIdBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列在id中占的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">sequenceBits</span> <span class="operator">=</span> <span class="number">12L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机器ID向左移12位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">workerIdShift</span> <span class="operator">=</span> sequenceBits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据标识id向左移17位(12+5)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">dataCenterIdShift</span> <span class="operator">=</span> sequenceBits + workerIdBits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间截向左移22位(5+5+12)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">timestampLeftShift</span> <span class="operator">=</span> sequenceBits + workerIdBits + dataCenterIdBits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">sequenceMask</span> <span class="operator">=</span> -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; sequenceBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工作机器ID(0~31)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> workerId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据中心ID(0~31)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> dataCenterId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 毫秒内序列(0~4095)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">sequence</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上次生成ID的时间截</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">lastTimestamp</span> <span class="operator">=</span> -<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一台机器只需要一个实例，以保证产生有序的、不重复的ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">SnowflakeIdWorker</span> <span class="variable">SNOWFLAKE_ID_WORKER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SnowflakeIdWorker</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==============================Constructors=====================================</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SnowflakeIdWorker</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dataCenterId = getCurrentDataCenterId();</span><br><span class="line">        <span class="built_in">this</span>.workerId = getCurrentWorkerId(dataCenterId);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SnowflakeIdWorker</span><span class="params">(<span class="type">long</span> dataCenterId)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dataCenterId &gt; maxDataCenterId || dataCenterId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                    String.format(<span class="string">&quot;data center Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxDataCenterId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.dataCenterId = dataCenterId;</span><br><span class="line">        <span class="built_in">this</span>.workerId = getCurrentWorkerId(dataCenterId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> workerId     工作ID (0~31)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataCenterId 数据中心ID (0~31)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SnowflakeIdWorker</span><span class="params">(<span class="type">long</span> workerId, <span class="type">long</span> dataCenterId)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                    String.format(<span class="string">&quot;worker Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxWorkerId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dataCenterId &gt; maxDataCenterId || dataCenterId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                    String.format(<span class="string">&quot;data center Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxDataCenterId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.workerId = workerId;</span><br><span class="line">        <span class="built_in">this</span>.dataCenterId = dataCenterId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SnowflakeIdWorker <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SNOWFLAKE_ID_WORKER;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==============================Methods==========================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得下一个ID (该方法是线程安全的)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SnowflakeId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">long</span> <span class="title function_">nextId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> timeGen();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (timestamp &lt; lastTimestamp) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(String.format(</span><br><span class="line">                    <span class="string">&quot;Clock moved backwards.  Refusing to generate id for %d milliseconds&quot;</span>, lastTimestamp - timestamp));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果是同一时间生成的，则进行毫秒内序列</span></span><br><span class="line">        <span class="keyword">if</span> (lastTimestamp == timestamp) &#123;</span><br><span class="line">            sequence = (sequence + <span class="number">1</span>) &amp; sequenceMask;</span><br><span class="line">            <span class="comment">// 毫秒内序列溢出</span></span><br><span class="line">            <span class="keyword">if</span> (sequence == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 阻塞到下一个毫秒,获得新的时间戳</span></span><br><span class="line">                timestamp = tilNextMillis(lastTimestamp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 时间戳改变，毫秒内序列重置</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            sequence = <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上次生成ID的时间截</span></span><br><span class="line">        lastTimestamp = timestamp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移位并通过或运算拼到一起组成64位的ID</span></span><br><span class="line">        <span class="keyword">return</span> ((timestamp - startTimestamp) &lt;&lt; timestampLeftShift)</span><br><span class="line">                | (dataCenterId &lt;&lt; dataCenterIdShift)</span><br><span class="line">                | (workerId &lt;&lt; workerIdShift)</span><br><span class="line">                | sequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阻塞到下一个毫秒，直到获得新的时间戳</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lastTimestamp 上次生成ID的时间截</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">long</span> <span class="title function_">tilNextMillis</span><span class="params">(<span class="type">long</span> lastTimestamp)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> timeGen();</span><br><span class="line">        <span class="keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;</span><br><span class="line">            timestamp = timeGen();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回以毫秒为单位的当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前时间(毫秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">long</span> <span class="title function_">timeGen</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前服务器mac地址的ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">long</span> <span class="title function_">getCurrentDataCenterId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">inetAddress</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line">            <span class="type">NetworkInterface</span> <span class="variable">networkInterface</span> <span class="operator">=</span> NetworkInterface.getByInetAddress(inetAddress);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != networkInterface) &#123;</span><br><span class="line">                <span class="type">byte</span>[] mac = networkInterface.getHardwareAddress();</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != mac) &#123;</span><br><span class="line">                    result = ((<span class="number">0x000000FF</span> &amp; mac[mac.length - <span class="number">1</span>]) | (<span class="number">0x0000FF00</span> &amp; (mac[mac.length - <span class="number">2</span>] &lt;&lt; <span class="number">8</span>))) &gt;&gt; <span class="number">6</span>;</span><br><span class="line">                    result %= (maxDataCenterId + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result = <span class="number">1L</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException | SocketException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据应用进程改造为workId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataCenterId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">long</span> <span class="title function_">getCurrentWorkerId</span><span class="params">(<span class="type">long</span> dataCenterId)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        builder.append(dataCenterId);</span><br><span class="line">        <span class="type">String</span> <span class="variable">processName</span> <span class="operator">=</span> ManagementFactory.getRuntimeMXBean().getName();</span><br><span class="line">        builder.append(processName.contains(<span class="string">&quot;@&quot;</span>) ? processName.substring(<span class="number">0</span>, processName.indexOf(<span class="string">&quot;@&quot;</span>)) : processName);</span><br><span class="line">        <span class="keyword">return</span> (builder.toString().hashCode() &amp; <span class="number">0xFFFF</span>) % (maxWorkerId + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==============================Test=============================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> SnowflakeIdWorker.getInstance().nextId();</span><br><span class="line">            System.out.println(Long.toBinaryString(id));</span><br><span class="line">            System.out.println(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
        <category>分布式ID</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>分布式ID</tag>
      </tags>
  </entry>
  <entry>
    <title>Log4j支持同时按日期和文件大小分割日志</title>
    <url>/2023/11/20/log4j%E6%94%AF%E6%8C%81%E5%90%8C%E6%97%B6%E6%8C%89%E6%97%A5%E6%9C%9F%E5%92%8C%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F%E5%88%86%E5%89%B2%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h2 id="log4j支持同时按日期和文件大小分割日志"><a href="#log4j支持同时按日期和文件大小分割日志" class="headerlink" title="log4j支持同时按日期和文件大小分割日志"></a>log4j支持同时按日期和文件大小分割日志</h2><p>DailyAndSizeRollingFileAppender.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.log4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.helpers.CountingQuietWriter;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.helpers.LogLog;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.helpers.OptionConverter;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.spi.LoggingEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Writer;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> z```s</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> java8</span></span><br><span class="line"><span class="comment"> * 2020-10-30 17:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DailyAndSizeRollingFileAppender</span> <span class="keyword">extends</span> <span class="title class_">FileAppender</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TOP_OF_TROUBLE</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TOP_OF_MINUTE</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TOP_OF_HOUR</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">HALF_DAY</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TOP_OF_DAY</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TOP_OF_WEEK</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TOP_OF_MONTH</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="type">long</span> <span class="variable">maxFileSize</span> <span class="operator">=</span> <span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="variable">maxBackupIndex</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">datePattern</span> <span class="operator">=</span> <span class="string">&quot;&#x27;.&#x27;yyyy-MM-dd&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String scheduledFilename;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">nextCheck</span> <span class="operator">=</span> System.currentTimeMillis() - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    </span><br><span class="line">    SimpleDateFormat sdf;</span><br><span class="line">    </span><br><span class="line">    <span class="type">RollingCalendar</span> <span class="variable">rc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RollingCalendar</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">checkPeriod</span> <span class="operator">=</span> TOP_OF_TROUBLE;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">TimeZone</span> <span class="variable">GMT_TIME_ZONE</span> <span class="operator">=</span> TimeZone.getTimeZone(<span class="string">&quot;GMT&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DailyAndSizeRollingFileAppender</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DailyAndSizeRollingFileAppender</span><span class="params">(Layout layout, String filename, String datePattern)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>(layout, filename, <span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.datePattern = datePattern;</span><br><span class="line">        activateOptions();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getMaximumFileSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> maxFileSize;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaximumFileSize</span><span class="params">(<span class="type">long</span> maxFileSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxFileSize = maxFileSize;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaxFileSize</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxFileSize = OptionConverter.toFileSize(value, maxFileSize + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMaxBackupIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> maxBackupIndex;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaxBackupIndex</span><span class="params">(<span class="type">int</span> maxBackupIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxBackupIndex = maxBackupIndex;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDatePattern</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> datePattern;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDatePattern</span><span class="params">(String datePattern)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.datePattern = datePattern;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">activateOptions</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.activateOptions();</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != datePattern &amp;&amp; fileName != <span class="literal">null</span>) &#123;</span><br><span class="line">            now.setTime(System.currentTimeMillis());</span><br><span class="line">            sdf = <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(datePattern);</span><br><span class="line">            <span class="type">int</span> <span class="variable">type</span> <span class="operator">=</span> computeCheckPeriod();</span><br><span class="line">            printPeriodicity(type);</span><br><span class="line">            rc.setType(type);</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fileName);</span><br><span class="line">            scheduledFilename = fileName + sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>(file.lastModified()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LogLog.error(<span class="string">&quot;Either File or DatePattern options are not set for appender [&quot;</span> + name + <span class="string">&quot;].&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printPeriodicity</span><span class="params">(<span class="type">int</span> type)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> TOP_OF_MINUTE:</span><br><span class="line">                LogLog.debug(<span class="string">&quot;Appender [&quot;</span> + name + <span class="string">&quot;] to be rolled every minute.&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> TOP_OF_HOUR:</span><br><span class="line">                LogLog.debug(<span class="string">&quot;Appender [&quot;</span> + name + <span class="string">&quot;] to be rolled on top of every hour.&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> HALF_DAY:</span><br><span class="line">                LogLog.debug(<span class="string">&quot;Appender [&quot;</span> + name + <span class="string">&quot;] to be rolled at midday and midnight.&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> TOP_OF_DAY:</span><br><span class="line">                LogLog.debug(<span class="string">&quot;Appender [&quot;</span> + name + <span class="string">&quot;] to be rolled at midnight.&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> TOP_OF_WEEK:</span><br><span class="line">                LogLog.debug(<span class="string">&quot;Appender [&quot;</span> + name + <span class="string">&quot;] to be rolled at start of week.&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> TOP_OF_MONTH:</span><br><span class="line">                LogLog.debug(<span class="string">&quot;Appender [&quot;</span> + name + <span class="string">&quot;] to be rolled at start of every month.&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                LogLog.warn(<span class="string">&quot;Unknown periodicity for appender [&quot;</span> + name + <span class="string">&quot;].&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">computeCheckPeriod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RollingCalendar</span> <span class="variable">rollingCalendar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RollingCalendar</span>(GMT_TIME_ZONE, Locale.getDefault());</span><br><span class="line">        <span class="type">Date</span> <span class="variable">epoch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != datePattern) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> TOP_OF_MINUTE; i &lt;= TOP_OF_MONTH; i++) &#123;</span><br><span class="line">                <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(datePattern);</span><br><span class="line">                simpleDateFormat.setTimeZone(GMT_TIME_ZONE);</span><br><span class="line">                <span class="type">String</span> <span class="variable">r0</span> <span class="operator">=</span> simpleDateFormat.format(epoch);</span><br><span class="line">                rollingCalendar.setType(i);</span><br><span class="line">                <span class="type">Date</span> <span class="variable">next</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(rollingCalendar.getNextCheckMillis(epoch));</span><br><span class="line">                <span class="type">String</span> <span class="variable">r1</span> <span class="operator">=</span> simpleDateFormat.format(next);</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> != r0 &amp;&amp; <span class="literal">null</span> != r1 &amp;&amp; !r0.equals(r1)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> TOP_OF_TROUBLE;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sizeRollOver</span><span class="params">()</span> &#123;</span><br><span class="line">        File target;</span><br><span class="line">        File file;</span><br><span class="line">        LogLog.debug(<span class="string">&quot;rolling over count=&quot;</span> + ((CountingQuietWriter) qw).getCount());</span><br><span class="line">        LogLog.debug(<span class="string">&quot;maxBackupIndex=&quot;</span> + maxBackupIndex);</span><br><span class="line">        <span class="type">String</span> <span class="variable">datedFilename</span> <span class="operator">=</span> fileName + sdf.format(now);</span><br><span class="line">        <span class="keyword">if</span> (maxBackupIndex &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            file = <span class="keyword">new</span> <span class="title class_">File</span>(datedFilename + <span class="string">&quot;.&quot;</span> + maxBackupIndex);</span><br><span class="line">            <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">                file.delete();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> maxBackupIndex - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">                file = <span class="keyword">new</span> <span class="title class_">File</span>(datedFilename + <span class="string">&quot;.&quot;</span> + i);</span><br><span class="line">                <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">                    target = <span class="keyword">new</span> <span class="title class_">File</span>(datedFilename + <span class="string">&quot;.&quot;</span> + (i + <span class="number">1</span>));</span><br><span class="line">                    LogLog.debug(<span class="string">&quot;Renaming file &quot;</span> + file + <span class="string">&quot; to &quot;</span> + target);</span><br><span class="line">                    file.renameTo(target);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            target = <span class="keyword">new</span> <span class="title class_">File</span>(datedFilename + <span class="string">&quot;.&quot;</span> + <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">this</span>.closeFile();</span><br><span class="line">            file = <span class="keyword">new</span> <span class="title class_">File</span>(fileName);</span><br><span class="line">            LogLog.debug(<span class="string">&quot;Renaming file &quot;</span> + file + <span class="string">&quot; to &quot;</span> + target);</span><br><span class="line">            file.renameTo(target);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (maxBackupIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</span><br><span class="line">                target = <span class="keyword">new</span> <span class="title class_">File</span>(datedFilename + <span class="string">&quot;.&quot;</span> + i);</span><br><span class="line">                <span class="keyword">if</span> (!target.exists()) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.closeFile();</span><br><span class="line">                    file = <span class="keyword">new</span> <span class="title class_">File</span>(fileName);</span><br><span class="line">                    file.renameTo(target);</span><br><span class="line">                    LogLog.debug(<span class="string">&quot;Renaming file &quot;</span> + file + <span class="string">&quot; to &quot;</span> + target);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.setFile(fileName, <span class="literal">false</span>, bufferedIO, bufferSize);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            LogLog.error(<span class="string">&quot;setFile(&quot;</span> + fileName + <span class="string">&quot;, false) call failed.&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        scheduledFilename = datedFilename;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">setFile</span><span class="params">(</span></span><br><span class="line"><span class="params">            String fileName,</span></span><br><span class="line"><span class="params">            <span class="type">boolean</span> append,</span></span><br><span class="line"><span class="params">            <span class="type">boolean</span> bufferedIO,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> bufferSize)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>.setFile(fileName, append, bufferedIO, bufferSize);</span><br><span class="line">        <span class="keyword">if</span> (append) &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fileName);</span><br><span class="line">            ((CountingQuietWriter) qw).setCount(f.length());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setQWForFiles</span><span class="params">(Writer writer)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.qw = <span class="keyword">new</span> <span class="title class_">CountingQuietWriter</span>(writer, errorHandler);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">subAppend</span><span class="params">(LoggingEvent event)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">n</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">if</span> (n &gt;= nextCheck) &#123;</span><br><span class="line">            now.setTime(n);</span><br><span class="line">            nextCheck = rc.getNextCheckMillis(now);</span><br><span class="line">            timeRollOver();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="literal">null</span> != fileName &amp;&amp; ((CountingQuietWriter) qw).getCount() &gt;= maxFileSize) &#123;</span><br><span class="line">            sizeRollOver();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">super</span>.subAppend(event);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">timeRollOver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == datePattern) &#123;</span><br><span class="line">            errorHandler.error(<span class="string">&quot;Missing DatePattern option in rollOver().&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">datedFilename</span> <span class="operator">=</span> fileName + sdf.format(now);</span><br><span class="line">        <span class="keyword">if</span> (scheduledFilename.equals(datedFilename)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.closeFile();</span><br><span class="line">        <span class="type">File</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(scheduledFilename);</span><br><span class="line">        <span class="keyword">if</span> (target.exists()) &#123;</span><br><span class="line">            target.delete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fileName);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> file.renameTo(target);</span><br><span class="line">        <span class="keyword">if</span> (result) &#123;</span><br><span class="line">            LogLog.debug(fileName + <span class="string">&quot; -&gt; &quot;</span> + scheduledFilename);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LogLog.error(<span class="string">&quot;Failed to rename [&quot;</span> + fileName + <span class="string">&quot;] to [&quot;</span> + scheduledFilename + <span class="string">&quot;].&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.setFile(fileName, <span class="literal">false</span>, bufferedIO, bufferSize);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            errorHandler.error(<span class="string">&quot;setFile(&quot;</span> + fileName + <span class="string">&quot;, false) call failed.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scheduledFilename = datedFilename;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RollingCalendar</span> <span class="keyword">extends</span> <span class="title class_">GregorianCalendar</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">3560331770601814177L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">type</span> <span class="operator">=</span> DailyAndSizeRollingFileAppender.TOP_OF_TROUBLE;</span><br><span class="line">    </span><br><span class="line">    RollingCalendar() &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    RollingCalendar(TimeZone tz, Locale locale) &#123;</span><br><span class="line">        <span class="built_in">super</span>(tz, locale);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setType</span><span class="params">(<span class="type">int</span> type)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getNextCheckMillis</span><span class="params">(Date now)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getNextCheckDate(now).getTime();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getNextCheckDate</span><span class="params">(Date now)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setTime(now);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> DailyAndSizeRollingFileAppender.TOP_OF_MINUTE:</span><br><span class="line">                <span class="built_in">this</span>.set(Calendar.SECOND, <span class="number">0</span>);</span><br><span class="line">                <span class="built_in">this</span>.set(Calendar.MILLISECOND, <span class="number">0</span>);</span><br><span class="line">                <span class="built_in">this</span>.add(Calendar.MINUTE, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DailyAndSizeRollingFileAppender.TOP_OF_HOUR:</span><br><span class="line">                <span class="built_in">this</span>.set(Calendar.MINUTE, <span class="number">0</span>);</span><br><span class="line">                <span class="built_in">this</span>.set(Calendar.SECOND, <span class="number">0</span>);</span><br><span class="line">                <span class="built_in">this</span>.set(Calendar.MILLISECOND, <span class="number">0</span>);</span><br><span class="line">                <span class="built_in">this</span>.add(Calendar.HOUR_OF_DAY, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DailyAndSizeRollingFileAppender.HALF_DAY:</span><br><span class="line">                <span class="built_in">this</span>.set(Calendar.MINUTE, <span class="number">0</span>);</span><br><span class="line">                <span class="built_in">this</span>.set(Calendar.SECOND, <span class="number">0</span>);</span><br><span class="line">                <span class="built_in">this</span>.set(Calendar.MILLISECOND, <span class="number">0</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">hour</span> <span class="operator">=</span> get(Calendar.HOUR_OF_DAY);</span><br><span class="line">                <span class="keyword">if</span> (hour &lt; <span class="number">12</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.set(Calendar.HOUR_OF_DAY, <span class="number">12</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">this</span>.set(Calendar.HOUR_OF_DAY, <span class="number">0</span>);</span><br><span class="line">                    <span class="built_in">this</span>.add(Calendar.DAY_OF_MONTH, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DailyAndSizeRollingFileAppender.TOP_OF_DAY:</span><br><span class="line">                <span class="built_in">this</span>.set(Calendar.HOUR_OF_DAY, <span class="number">0</span>);</span><br><span class="line">                <span class="built_in">this</span>.set(Calendar.MINUTE, <span class="number">0</span>);</span><br><span class="line">                <span class="built_in">this</span>.set(Calendar.SECOND, <span class="number">0</span>);</span><br><span class="line">                <span class="built_in">this</span>.set(Calendar.MILLISECOND, <span class="number">0</span>);</span><br><span class="line">                <span class="built_in">this</span>.add(Calendar.DATE, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DailyAndSizeRollingFileAppender.TOP_OF_WEEK:</span><br><span class="line">                <span class="built_in">this</span>.set(Calendar.DAY_OF_WEEK, getFirstDayOfWeek());</span><br><span class="line">                <span class="built_in">this</span>.set(Calendar.HOUR_OF_DAY, <span class="number">0</span>);</span><br><span class="line">                <span class="built_in">this</span>.set(Calendar.MINUTE, <span class="number">0</span>);</span><br><span class="line">                <span class="built_in">this</span>.set(Calendar.SECOND, <span class="number">0</span>);</span><br><span class="line">                <span class="built_in">this</span>.set(Calendar.MILLISECOND, <span class="number">0</span>);</span><br><span class="line">                <span class="built_in">this</span>.add(Calendar.WEEK_OF_YEAR, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DailyAndSizeRollingFileAppender.TOP_OF_MONTH:</span><br><span class="line">                <span class="built_in">this</span>.set(Calendar.DATE, <span class="number">1</span>);</span><br><span class="line">                <span class="built_in">this</span>.set(Calendar.HOUR_OF_DAY, <span class="number">0</span>);</span><br><span class="line">                <span class="built_in">this</span>.set(Calendar.MINUTE, <span class="number">0</span>);</span><br><span class="line">                <span class="built_in">this</span>.set(Calendar.SECOND, <span class="number">0</span>);</span><br><span class="line">                <span class="built_in">this</span>.set(Calendar.MILLISECOND, <span class="number">0</span>);</span><br><span class="line">                <span class="built_in">this</span>.add(Calendar.MONTH, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Unknown periodicity type.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getTime();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后在配置文件中配置相关信息：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">log4j.appender.R</span>=<span class="string">test.Log4JDateAndSizeSplit</span></span><br><span class="line"><span class="attr">log4j.appender.R.Threshold</span>=<span class="string">INFO</span></span><br><span class="line"><span class="attr">log4j.appender.R.ImmediateFlush</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">log4j.appender.R.File</span>=<span class="string">/xxx.log</span></span><br><span class="line"><span class="attr">log4j.appender.R.DatePattern</span>=<span class="string">&#x27;_&#x27;yyyy-MM-dd&#x27;.log&#x27;</span></span><br><span class="line"><span class="attr">log4j.appender.R.Append</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">log4j.appender.R.MaxFileSize</span>=<span class="string">200MB</span></span><br><span class="line"><span class="comment">#MaxBackupIndex=-1(not limit about file number)</span></span><br><span class="line"><span class="attr">log4j.appender.R.MaxBackupIndex</span>=<span class="string">-1</span></span><br><span class="line"><span class="attr">log4j.appender.R.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.R.layout.ConversionPattern</span>= <span class="string">%d&#123;yyyy -MM-dd HH\:mm \:ss&#125; [%5p] - %c -%F(%L) -%m%n</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
        <category>Log4j</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Log4j</tag>
      </tags>
  </entry>
  <entry>
    <title>ZooKeeper分布式锁</title>
    <url>/2021/02/12/ZooKeeper%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    <content><![CDATA[<p>不多说了直接看代码吧</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xxx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.data.Stat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;ZooKeeper分布式锁&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZooKeeperDistributedLock</span> <span class="keyword">implements</span> <span class="title class_">Watcher</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ZooKeeper zk;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">locksRoot</span> <span class="operator">=</span> <span class="string">&quot;/locks&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String lockKey;</span><br><span class="line">    <span class="keyword">private</span> String waitNode;</span><br><span class="line">    <span class="keyword">private</span> String lockNode;</span><br><span class="line">    <span class="keyword">private</span> CountDownLatch latch;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">CountDownLatch</span> <span class="variable">connectedLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">sessionTimeout</span> <span class="operator">=</span> <span class="number">30000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ZooKeeperDistributedLock</span><span class="params">(String zkAddress, String lockKey)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lockKey = lockKey;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            zk = <span class="keyword">new</span> <span class="title class_">ZooKeeper</span>(zkAddress, sessionTimeout, <span class="built_in">this</span>);</span><br><span class="line">            connectedLatch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LockException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(WatchedEvent event)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (event.getState() == Event.KeeperState.SyncConnected) &#123;</span><br><span class="line">            connectedLatch.countDown();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.latch != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.latch.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">acquireDistributedLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.tryLock()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                waitForLock(waitNode, sessionTimeout);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LockException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LockException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 传入进去的locksRoot + “/” + productId</span></span><br><span class="line">            <span class="comment">// 假设productId代表了一个商品id，比如说1</span></span><br><span class="line">            <span class="comment">// locksRoot = locks</span></span><br><span class="line">            <span class="comment">// /locks/10000000000，/locks/10000000001，/locks/10000000002</span></span><br><span class="line">            lockNode = zk.create(locksRoot + <span class="string">&quot;/&quot;</span> + lockKey, <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</span><br><span class="line">            <span class="comment">// 看看刚创建的节点是不是最小的节点</span></span><br><span class="line">            <span class="comment">// locks：10000000000，10000000001，10000000002</span></span><br><span class="line">            List&lt;String&gt; locks = zk.getChildren(locksRoot, <span class="literal">false</span>);</span><br><span class="line">            Collections.sort(locks);</span><br><span class="line">            <span class="keyword">if</span>(lockNode.equals(locksRoot+<span class="string">&quot;/&quot;</span>+ locks.get(<span class="number">0</span>)))&#123;</span><br><span class="line">                <span class="comment">//如果是最小的节点,则表示取得锁</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果不是最小的节点，找到比自己小1的节点</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">previousLockIndex</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; locks.size(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(lockNode.equals(locksRoot + <span class="string">&quot;/&quot;</span> + locks.get(i))) &#123;</span><br><span class="line">                    previousLockIndex = i - <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.waitNode = locks.get(previousLockIndex);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LockException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LockException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">waitForLock</span><span class="params">(String waitNode, <span class="type">long</span> waitTime)</span> <span class="keyword">throws</span> InterruptedException, KeeperException &#123;</span><br><span class="line">        <span class="type">Stat</span> <span class="variable">stat</span> <span class="operator">=</span> zk.exists(locksRoot + <span class="string">&quot;/&quot;</span> + waitNode, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (stat != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.latch = <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">this</span>.latch.await(waitTime, TimeUnit.MILLISECONDS);</span><br><span class="line">            <span class="built_in">this</span>.latch = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 删除/locks/10000000000节点</span></span><br><span class="line">            <span class="comment">// 删除/locks/10000000001节点</span></span><br><span class="line">            System.out.println(<span class="string">&quot;unlock &quot;</span> + lockNode);</span><br><span class="line">            zk.delete(lockNode, -<span class="number">1</span>);</span><br><span class="line">            lockNode = <span class="literal">null</span>;</span><br><span class="line">            zk.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">LockException</span><span class="params">(String e)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">LockException</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
        <category>分布式锁</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>分布式锁</tag>
        <tag>Zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>Presto搭建</title>
    <url>/2020/06/12/presto%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="Presto的部署"><a href="#Presto的部署" class="headerlink" title="Presto的部署"></a>Presto的部署</h1><h2 id="Presto安装"><a href="#Presto安装" class="headerlink" title="Presto安装"></a>Presto安装</h2><p>1、下载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://repo1.maven.org/maven2/com/facebook/presto/presto-server/&lt;VERSION&gt;/presto-server-&lt;VERSION&gt;.tar.gz</span><br></pre></td></tr></table></figure>

<p>2、解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf presto-server-&lt;VERSION&gt;.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>

<p>创建数据目录和解压目录</p>
<h2 id="Presto配置"><a href="#Presto配置" class="headerlink" title="Presto配置"></a>Presto配置</h2><p>在安装目录里创建etc目录。etc目录中会有以下配置：</p>
<ul>
<li>节点属性（Node Properties）：每个节点的环境配置</li>
<li>JVM配置（JVM Config）：Java虚拟机的命令行选项</li>
<li>配置属性（Config Properties）：Presto server的配置</li>
<li>Catalog属性（Catalog Properties）：配置数据源Connector</li>
</ul>
<h3 id="节点属性（Node-Properties）"><a href="#节点属性（Node-Properties）" class="headerlink" title="节点属性（Node Properties）"></a>节点属性（Node Properties）</h3><p>节点属性文件etc&#x2F;node.properties，包含每个节点的配置。一个节点是一个Presto实例。这文件一般是在Presto第一次安装时创建的。以下是最小配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">node.environment</span>=<span class="string">production</span></span><br><span class="line"><span class="attr">node.id</span>=<span class="string">ffffffff-ffff-ffff-ffff-ffffffffffff</span></span><br><span class="line"><span class="attr">node.data-dir</span>=<span class="string">/var/presto/data</span></span><br></pre></td></tr></table></figure>

<p>node.environment：环境名字，Presto集群中的节点的环境名称都必须一样。</p>
<p>node.id：唯一标识，每个节点的标识都必须是唯一的。就算重启或者升级都必须保持原来的标识。</p>
<p>node.data-dir：数据目录，Presto用来存放日志及其他数据。</p>
<h3 id="JVM配置（JVM-Config）"><a href="#JVM配置（JVM-Config）" class="headerlink" title="JVM配置（JVM Config）"></a>JVM配置（JVM Config）</h3><p>JVM配置文件etc&#x2F;jvm.config，包含启动Java虚拟机时的命令行选项。格式是每一行是一个命令行选项。此文件数据是由shell解析，所以选项中包含空格或特殊字符会被忽略。</p>
<p>以下是参考配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-server</span><br><span class="line">-Xmx16G</span><br><span class="line">-XX:+UseG1GC</span><br><span class="line">-XX:G1HeapRegionSize=32M</span><br><span class="line">-XX:+UseGCOverheadLimit</span><br><span class="line">-XX:+ExplicitGCInvokesConcurrent</span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">-XX:+ExitOnOutOfMemoryError</span><br></pre></td></tr></table></figure>

<p>因为OutOfMemoryError会导致JVM存在不一致状态，所以用heap dump来debug，来找出进程为什么崩溃的原因。</p>
<h3 id="配置属性（Config-Properties）"><a href="#配置属性（Config-Properties）" class="headerlink" title="配置属性（Config Properties）"></a>配置属性（Config Properties）</h3><p>配置属性文件etc&#x2F;config.properties，包含Presto Server配置。Presto server可以同时为coordinator和worker，但一个大集群里最好就是只指定一台机器为coordinator。</p>
<p>以下是参考coordinator的最小配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">coordinator</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">node-scheduler.include-coordinator</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">http-server.http.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="attr">query.max-memory</span>=<span class="string">50GB</span></span><br><span class="line"><span class="attr">query.max-memory-per-node</span>=<span class="string">1GB</span></span><br><span class="line"><span class="attr">discovery-server.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">discovery.uri</span>=<span class="string">http://example.net:8080</span></span><br></pre></td></tr></table></figure>

<p>以下是参考worker的最小配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">coordinator</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">http-server.http.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="attr">query.max-memory</span>=<span class="string">50GB</span></span><br><span class="line"><span class="attr">query.max-memory-per-node</span>=<span class="string">1GB</span></span><br><span class="line"><span class="attr">discovery.uri</span>=<span class="string">http://example.net:8080</span></span><br></pre></td></tr></table></figure>

<p>如果适用于测试目的，需要将一台机器同时配置为coordinator和worker，则使用以下配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">coordinator</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">node-scheduler.include-coordinator</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">http-server.http.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="attr">query.max-memory</span>=<span class="string">5GB</span></span><br><span class="line"><span class="attr">query.max-memory-per-node</span>=<span class="string">1GB</span></span><br><span class="line"><span class="attr">discovery-server.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">discovery.uri</span>=<span class="string">http://example.net:8080</span></span><br></pre></td></tr></table></figure>

<p>coordinator： 是否运行该实例为coordinator（接受client的查询和管理查询执行）。<br>node-scheduler.include-coordinator：coordinator是否也作为work。对于大型集群来说，在coordinator里做worker的工作会影响查询性能。<br>http-server.http.port：指定HTTP端口。Presto使用HTTP来与外部和内部进行交流。<br>query.max-memory：查询能用到的最大总内存<br>query.max-memory-per-node：查询能用到的最大单结点内存<br>discovery-server.enabled：Presto使用Discovery服务去找到集群中的所有结点。每个Presto实例在启动时都会在Discovery服务里注册。这样可以简化部署，不需要额外的服务，Presto的coordinator内置一个Discovery服务。也是使用HTTP端口。<br>discovery.uri：Discovery服务的URI。将example.net:8080替换为coordinator的host和端口。<strong>这个URI不能以斜杠结尾，这个错误需特别注意，不然会报404错误</strong>。</p>
<p>另外还有以下属性：<br>jmx.rmiregistry.port: 指定JMX RMI的注册。JMX client可以连接此端口<br>jmx.rmiserver.port: 指定JXM RMI的服务器。可通过JMX监听。</p>
<h3 id="Catalog属性（Catalog-Properties）"><a href="#Catalog属性（Catalog-Properties）" class="headerlink" title="Catalog属性（Catalog Properties）"></a>Catalog属性（Catalog Properties）</h3><p>Presto通过connector访问数据。而connector是挂载（mount）在catelog中。connector支持catelog里所有的schema和table。举个例子，Hive connector映射每个Hive数据库到schema，因此Hive connector挂载在hive catelog（所以可以把catelog理解为目录，挂载），而且Hive包含table clicks在数据库web，所以这个table在Presto是hive.web.clicks。<br>Catalog的注册是通过etc&#x2F;catalog目录下的catalog属性文件。例如，创建etc&#x2F;catalog&#x2F;jmx.properties，将jmxconnector挂载在jmx catelog：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">connector.name</span>=<span class="string">jmx</span></span><br></pre></td></tr></table></figure>

<p>hive的注册，创建etc&#x2F;catalog&#x2F;hive.properties，参考最小配置如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">connector.name</span>=<span class="string">hive-hadoop2</span></span><br><span class="line"><span class="attr">hive.metastore.uri</span>=<span class="string">thrift://example.net:9083</span></span><br><span class="line"><span class="attr">hive.config.resources</span>=<span class="string">/etc/hadoop/conf/core-site.xml,/etc/hadoop/conf/hdfs-site.xml</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="运行Presto"><a href="#运行Presto" class="headerlink" title="运行Presto"></a>运行Presto</h2><p>启动命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/launcher start</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>日志在var&#x2F;log目录下：<br>launcher.log：记录服务初始化情况和一些JVM的诊断。<br>server.log：Presto的主要日志文件。会自动被压缩。<br>http-request.log：记录HTTP请求。会自动被压缩。</p>
<h2 id="运行Presto命令行界面"><a href="#运行Presto命令行界面" class="headerlink" title="运行Presto命令行界面"></a>运行Presto命令行界面</h2><ol>
<li>下载 presto-cli-<VERSION>-executable.jar</VERSION></li>
<li>修改名字 presto-cli-<VERSION>-executable.jar为 presto</VERSION></li>
<li>修改执行权限chmod +x</li>
<li>运行</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./presto --server localhost:8080 --catalog hive --schema default</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>大数据</category>
        <category>MPP</category>
        <category>Presto</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>MPP</tag>
        <tag>Presto</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven项目或第三方jar发布到私服</title>
    <url>/2019/09/12/maven%E9%A1%B9%E7%9B%AE%E6%88%96%E7%AC%AC%E4%B8%89%E6%96%B9jar%E5%8F%91%E5%B8%83%E5%88%B0%E7%A7%81%E6%9C%8D/</url>
    <content><![CDATA[<h2 id="第三方jar发布"><a href="#第三方jar发布" class="headerlink" title="第三方jar发布"></a>第三方jar发布</h2><p> 打开命令行进入到maven安装目录下的bin目录，敲入如下指令，具体参考根据情况修改，下面有参数详细说明。   </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn deploy:</span><br><span class="line">deploy-file </span><br><span class="line">-DgroupId=hw.vedioicon </span><br><span class="line">-DartifactId=vedioicon </span><br><span class="line">-Dversion=1.0 </span><br><span class="line">-Dpackaging=jar </span><br><span class="line">-Dfile=D:\workspace\web-mooc\src\main\webapp\WEB-INF\lib\vedioicon.jar </span><br><span class="line">-Durl=http://host:port/nexus/content/repositories/thirdparty/ </span><br><span class="line">-DrepositoryId=thirdparty</span><br></pre></td></tr></table></figure>

<ul>
<li>DgroupId和DartifactId构成了该jar包在pom.xml的坐标，项目就是依靠这两个属性定位。自己起名字也行。</li>
<li>Dfile表示需要上传的jar包的绝对路径。</li>
<li>Durl私服上仓库的位置，打开nexus——&gt;repositories菜单，可以看到该路径。</li>
<li>DrepositoryId服务器的表示id，在nexus的configuration可以看到。</li>
<li>上传成功后，在nexus界面点击3rd party仓库可以看到这包。</li>
</ul>
<h2 id="项目发布"><a href="#项目发布" class="headerlink" title="项目发布"></a>项目发布</h2><p>  pom配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://host:port/nexus/content/repositories/releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>nexus distribution snapshot repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://host:port/nexus/content/repositories/snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>项目右键 run-maven-build 在goal中填写deploy直接运行即可</p>
<p>权限配置：在用户或maven的配置settings.xml，注意如果用户下.m2中配置了settings，以.m2中的为主</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">username</span>&gt;</span>deployment<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">password</span>&gt;</span>******<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">username</span>&gt;</span>deployment<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">password</span>&gt;</span>******<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>thirdparty<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      	<span class="tag">&lt;<span class="name">username</span>&gt;</span>deployment<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      	<span class="tag">&lt;<span class="name">password</span>&gt;</span>******<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  注意id一定要和server中的id统一 </p>
<p><font size="1"><em>参考链接：<a href="https://my.oschina.net/geekLight/blog/424206">https://my.oschina.net/geekLight/blog/424206</a></em></font></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis分布式锁</title>
    <url>/2021/04/07/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    <content><![CDATA[<h2 id="Redisson"><a href="#Redisson" class="headerlink" title="Redisson"></a>Redisson</h2><p> <a href="https://redis.io/">Redis 官方</a>给出了以上两种基于 Redis 实现分布式锁的方法，详细说明可以查看：<a href="https://redis.io/topics/distlock">https://redis.io/topics/distlock</a>  </p>
<p>Github:   <a href="https://github.com/redisson/redisson">https://github.com/redisson/redisson</a> </p>
<h2 id="自己Java实现"><a href="#自己Java实现" class="headerlink" title="自己Java实现"></a>自己Java实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xxx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.params.SetParams;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Used jedis 3.1.0&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Jedis</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisDistributedLock</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOCK_SUCCESS</span> <span class="operator">=</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">UNLOCK_SUCCESS</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">DEFAULT_MAX_LOCK_TIME</span> <span class="operator">=</span> <span class="number">300000L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DELETE_SCRIPT</span> <span class="operator">=</span> <span class="string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Jedis jedis;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> lockTime;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RedisDistributedLock</span><span class="params">(Jedis jedis, String key, <span class="type">long</span> lockTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jedis = jedis;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">        <span class="built_in">this</span>.lockTime = lockTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RedisDistributedLock <span class="title function_">build</span><span class="params">(Jedis jedis, String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> build(jedis, key, DEFAULT_MAX_LOCK_TIME);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RedisDistributedLock <span class="title function_">build</span><span class="params">(Jedis jedis, String key, <span class="type">long</span> lockTime)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RedisDistributedLockV1</span>(jedis, key, lockTime);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lock(<span class="number">0</span>, <span class="number">0L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lock</span><span class="params">(<span class="type">int</span> retryTimes, <span class="type">long</span> retryIntervalTimeMillis)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> retryTimes + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; times; i++) &#123;</span><br><span class="line">            <span class="type">SetParams</span> <span class="variable">setParams</span> <span class="operator">=</span> SetParams.setParams();</span><br><span class="line">            setParams.nx().ex((<span class="type">int</span>) (lockTime / <span class="number">1000L</span>));</span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> jedis.set(key, String.valueOf(key.hashCode()), setParams);</span><br><span class="line">            <span class="keyword">if</span> (LOCK_SUCCESS.equals(result)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (retryIntervalTimeMillis &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(retryIntervalTimeMillis);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    System.out.println(e.getMessage());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> jedis.eval(DELETE_SCRIPT, Collections.singletonList(key), Collections.singletonList(String.valueOf(key.hashCode())));</span><br><span class="line">        <span class="keyword">return</span> UNLOCK_SUCCESS.equals(result);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
        <category>分布式锁</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>分布式锁</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>常用加解密工具类（MD5、SHA、DES、AES、RSA）</title>
    <url>/2023/11/21/%E5%B8%B8%E7%94%A8%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%88MD5%E3%80%81SHA%E3%80%81DES%E3%80%81AES%E3%80%81RSA%EF%BC%89/</url>
    <content><![CDATA[<h1 id="MD5-单向加密"><a href="#MD5-单向加密" class="headerlink" title="MD5 单向加密"></a>MD5 单向加密</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回MD5单向加密后的十六进制字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getEncryptForHex</span><span class="params">(<span class="type">byte</span>[] data)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">byte</span>[] digestData = encrypt(data);</span><br><span class="line">    <span class="type">StringBuffer</span> <span class="variable">hex</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; digestData.length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> ((<span class="type">int</span>)digestData[i]) &amp; <span class="number">0XFF</span>;</span><br><span class="line">        <span class="keyword">if</span>(h &lt; <span class="number">16</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            hex.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        hex.append(Integer.toHexString(h));</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> hex.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="DES-对称加密"><a href="#DES-对称加密" class="headerlink" title="DES 对称加密"></a>DES 对称加密</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] encrypt(<span class="type">byte</span>[] data) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span>(secretKey == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(secretKey)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;scretKey need to exists&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">SecretKey</span> <span class="variable">md5Key</span> <span class="operator">=</span> getKey(secretKey);</span><br><span class="line">    <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(ALGORITHM);</span><br><span class="line">    cipher.init(Cipher.ENCRYPT_MODE, md5Key);</span><br><span class="line">    <span class="keyword">return</span> cipher.doFinal(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] decrypt(<span class="type">byte</span>[] data) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span>(secretKey == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(secretKey)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;scretKey need to exists&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">SecretKey</span> <span class="variable">md5Key</span> <span class="operator">=</span> getKey(secretKey);</span><br><span class="line">    <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(ALGORITHM);</span><br><span class="line">    cipher.init(Cipher.DECRYPT_MODE, md5Key);</span><br><span class="line">    <span class="keyword">return</span> cipher.doFinal(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="RSA-非对称加密——私钥加密-私钥解密-私钥签名"><a href="#RSA-非对称加密——私钥加密-私钥解密-私钥签名" class="headerlink" title="RSA 非对称加密——私钥加密 &amp; 私钥解密 &amp; 私钥签名"></a>RSA 非对称加密——私钥加密 &amp; 私钥解密 &amp; 私钥签名</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] encrypt(<span class="type">byte</span>[] data) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">PrivateKey</span> <span class="variable">rsaPrivateKey</span> <span class="operator">=</span> getRSAPrivateKey();</span><br><span class="line">    <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(ALGORITHM);</span><br><span class="line">    cipher.init(Cipher.ENCRYPT_MODE, rsaPrivateKey);</span><br><span class="line">    <span class="keyword">return</span> cipher.doFinal(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] decrypt(<span class="type">byte</span>[] data) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">PrivateKey</span> <span class="variable">rsaPrivateKey</span> <span class="operator">=</span> getRSAPrivateKey();</span><br><span class="line">    <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(ALGORITHM);</span><br><span class="line">    cipher.init(Cipher.DECRYPT_MODE, rsaPrivateKey);</span><br><span class="line">    <span class="keyword">return</span> cipher.update(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用私钥 对数据进行签名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">sign</span><span class="params">(<span class="type">byte</span>[] data)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">PrivateKey</span> <span class="variable">rsaPrivateKey</span> <span class="operator">=</span> getRSAPrivateKey();</span><br><span class="line">    <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> Signature.getInstance(SIGN_ALGORITHM);</span><br><span class="line">    signature.initSign(rsaPrivateKey);</span><br><span class="line">    signature.update(data);</span><br><span class="line">    <span class="keyword">return</span> encoder(signature.sign());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="RSA-非对称加密——公钥加密-公钥解密-公钥校验签名"><a href="#RSA-非对称加密——公钥加密-公钥解密-公钥校验签名" class="headerlink" title="RSA 非对称加密——公钥加密 &amp; 公钥解密 &amp; 公钥校验签名"></a>RSA 非对称加密——公钥加密 &amp; 公钥解密 &amp; 公钥校验签名</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] encrypt(<span class="type">byte</span>[] data) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span>(publicKey == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(publicKey)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;publicKey is need exists&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">PublicKey</span> <span class="variable">rsaPublicKey</span> <span class="operator">=</span> getRSAPublicKey(publicKey);</span><br><span class="line">    <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(ALGORITHM);</span><br><span class="line">    cipher.init(Cipher.ENCRYPT_MODE, rsaPublicKey);</span><br><span class="line">    <span class="keyword">return</span> cipher.doFinal(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] decrypt(<span class="type">byte</span>[] data) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span>(publicKey == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(publicKey)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;publicKey is need exists&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="type">PublicKey</span> <span class="variable">rsaPublicKey</span> <span class="operator">=</span> getRSAPublicKey(publicKey);</span><br><span class="line">    <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(ALGORITHM);</span><br><span class="line">    cipher.init(Cipher.DECRYPT_MODE, rsaPublicKey);</span><br><span class="line">    <span class="keyword">return</span> cipher.doFinal(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用公钥校验签名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sign</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">verifySign</span><span class="params">(<span class="type">byte</span>[] data, String sign)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span>(publicKey == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(publicKey)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;publicKey is need exists&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">PublicKey</span> <span class="variable">rsaPublicKey</span> <span class="operator">=</span> getRSAPublicKey(publicKey);</span><br><span class="line">    <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> Signature.getInstance(SIGN_ALGORITHM);</span><br><span class="line">    signature.initVerify(rsaPublicKey);</span><br><span class="line">    signature.update(data);</span><br><span class="line">    <span class="keyword">return</span> signature.verify(decoder(sign));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
        <category>加密解密</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>解密解密</tag>
      </tags>
  </entry>
  <entry>
    <title>查看Gradle某jar包的依赖</title>
    <url>/2017/07/22/%E6%9F%A5%E7%9C%8BGradle%E6%9F%90jar%E5%8C%85%E7%9A%84%E4%BE%9D%E8%B5%96/</url>
    <content><![CDATA[<p>执行下面的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gradle :模块:dependencyInsight --dependency 包名 --configuration compile</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
        <category>Gradle</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>解决docker pull 速度慢</title>
    <url>/2017/04/05/%E8%A7%A3%E5%86%B3docker-pull-%E9%80%9F%E5%BA%A6%E6%85%A2/</url>
    <content><![CDATA[<h3 id="修改为国内镜像源"><a href="#修改为国内镜像源" class="headerlink" title="修改为国内镜像源"></a>修改为国内镜像源</h3><p>在&#x2F;etc&#x2F;docker&#x2F;daemon.json文件中添加下面参数</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;registry-mirrors&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;&lt;your accelerate address&gt;&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><em>注：如果没有该文件则自行创建</em></p>
<h3 id="重启docker服务"><a href="#重启docker服务" class="headerlink" title="重启docker服务"></a>重启docker服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart docker.service</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>本地管理和切换多个github账号</title>
    <url>/2016/03/07/%E6%9C%AC%E5%9C%B0%E7%AE%A1%E7%90%86%E5%92%8C%E5%88%87%E6%8D%A2%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大多数的我们都会遇到这样一个问题：公司有一个 github 账户，这个是专门为工作准备的。而我们自己也有一个自己的私人 github 账户，有事没事做做自己的项目，写写自己感兴趣的东西。可是，我们怎么在电脑上把公司 github 切换到自己的私人github 账号上呢？</p>
<h2 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h2><ol>
<li>创建ssh密钥；</li>
<li>将密钥添加到 github 账户；</li>
<li>创建 config 文件，管理单独的 key</li>
<li>更新存储的 key</li>
<li>测试 git clone 和 git push</li>
<li>在终端上切换 github 账号</li>
</ol>
<p><em>注意：以下为windows上操作，如果是在别的操作系统上，直接换成对应的操作命令即可。</em></p>
<h3 id="1、创建SSH密钥"><a href="#1、创建SSH密钥" class="headerlink" title="1、创建SSH密钥"></a>1、创建SSH密钥</h3><p>以多个帐号为例，一个帐号为admin，一个帐号为manager</p>
<ul>
<li>打开cmd</li>
<li>依次执行命令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> C:\Users\account\.ssh</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;admin@xxx.com&quot;</span> </span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;manager@xxx.com&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>当出现 “Enter file in which to save the key” 的提示时，将文件保存为 id_rsa_&lt;&gt;。将文件保存为 ~&#x2F;.ssh&#x2F;id_rsa_admin和 ~&#x2F;.ssh&#x2F;id_rsa_manager;</li>
</ul>
<p>生成后会在C:\Users\account\.ssh中看到以下四个文件</p>
<ul>
<li>id_rsa_admin</li>
<li>id_rsa_admin.pub</li>
<li>id_rsa_manager</li>
<li>id_rsa_manager.pub</li>
</ul>
<h3 id="2、将各自新密钥绑定到各自对应github账号"><a href="#2、将各自新密钥绑定到各自对应github账号" class="headerlink" title="2、将各自新密钥绑定到各自对应github账号"></a>2、将各自新密钥绑定到各自对应github账号</h3><p>此处不做详细描述</p>
<h3 id="3、创建一个配置config文件来管理key"><a href="#3、创建一个配置config文件来管理key" class="headerlink" title="3、创建一个配置config文件来管理key"></a>3、创建一个配置config文件来管理key</h3><p>在C:\Users\account\.ssh路径中创建一个名为config的文件</p>
<p>编辑文件内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Host</span> <span class="string">admin</span></span><br><span class="line">	<span class="string">HostName</span> <span class="string">github.com</span></span><br><span class="line">	<span class="string">User</span> <span class="string">git</span></span><br><span class="line">	<span class="string">IdentityFile</span> <span class="string">C:\Users\account\.ssh\id_rsa_admin</span></span><br><span class="line">	</span><br><span class="line"><span class="string">Host</span> <span class="string">manager</span></span><br><span class="line">	<span class="string">HostName</span> <span class="string">github.com</span></span><br><span class="line">	<span class="string">User</span> <span class="string">git</span></span><br><span class="line">	<span class="string">IdentityFile</span> <span class="string">C:\Users\account\.ssh\id_rsa_manager</span></span><br></pre></td></tr></table></figure>

<h3 id="4、更新存储的key"><a href="#4、更新存储的key" class="headerlink" title="4、更新存储的key"></a>4、更新存储的key</h3><p>在更新存储之前，我们要先检查一下本地的 OpenSSH 服务有没有开启，不然会报错。</p>
<p>开启 ssh 服务的流程为：</p>
<ol>
<li>设置 → 管理可选功能 → 添加功能 → [OpenSSH服务器]</li>
<li>计算机管理 → 服务和应用程序 → 服 务→ OpenSSH Authentication Agent&amp;OpenSSH Server → 右击</li>
</ol>
<p>开启SSH服务之后，我们就可以使用ssh命令了。</p>
<p>清除当前存储的认证：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\account\.ssh\&gt;ssh-add -D</span><br></pre></td></tr></table></figure>

<p>增加新的keys：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\account\.ssh\&gt;ssh-add id_rsa_admin</span><br><span class="line">C:\Users\account\.ssh\&gt;ssh-add id_rsa_manager</span><br></pre></td></tr></table></figure>

<p>验证一下！ github 是否能识别到这些 keys，在cmd中输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T admin</span><br></pre></td></tr></table></figure>

<p>可以看到 “Hi huangyuanzhen! You’ve successfully authenticated, but GitHub does not provide shell access.” 的提示语。这表明，github 能识别这些 keys 了。</p>
<h3 id="5、测试-clone-和-push"><a href="#5、测试-clone-和-push" class="headerlink" title="5、测试 clone 和 push"></a>5、测试 clone 和 push</h3><p>找个admin帐号下对应的正常的项目，举个例子git地址为：<a href="mailto:&#x67;&#105;&#x74;&#x40;&#103;&#x69;&#x74;&#104;&#117;&#98;&#x2e;&#99;&#111;&#109;">&#x67;&#105;&#x74;&#x40;&#103;&#x69;&#x74;&#104;&#117;&#98;&#x2e;&#99;&#111;&#109;</a>:xxxx(github帐号)&#x2F;hello-github.git</p>
<p>将地址改为：git@admin:xxxx(github帐号)&#x2F;hello-github.git</p>
<p>然后测试正常的clone和push操作</p>
<h3 id="6、在终端上切换-github-账号"><a href="#6、在终端上切换-github-账号" class="headerlink" title="6、在终端上切换 github 账号"></a>6、在终端上切换 github 账号</h3><p>如果之前已经用 git remote add 和远程 仓库建立过连接，我们需要先清除当前连接，不然会报错：“fatal: remote origin already exists.”；清除当前连接之后，然后连接新的账号里的仓库，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote <span class="built_in">rm</span> origin</span><br><span class="line">git remote git add origin git@admin:xxxx/work-test.git</span><br></pre></td></tr></table></figure>

<p>这样就能做到切换远程，必须将地址改为对应的config里面的host</p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li><a href="https://mherman.org/blog/managing-multiple-github-accounts/">Managing Multiple Github Accounts</a></li>
<li><a href="https://code.tutsplus.com/tutorials/quick-tip-how-to-work-with-github-and-multiple-accounts--net-22574">Quick Tip: How to Work with GitHub and Multiple Accounts</a></li>
<li><a href="https://www.cnblogs.com/sunchong/p/10171870.html">图解 – Win10 OpenSSH</a></li>
</ul>
<p><font size="1"><em>原文链接：<a href="https://my.oschina.net/hyzccc/blog/3042701">https://my.oschina.net/hyzccc/blog/3042701</a></em></font></p>
]]></content>
      <categories>
        <category>Git</category>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
